using System.Reflection;
using System.Text;
using Drogecode.Knrm.Oefenrooster.Shared.Authorization;

namespace Drogecode.Knrm.Oefenrooster.CodeGenerator;

public class GenerateUserRole
{
    public static void Start()
    {
        var generatedCode = GenerateUserRoleMapper();
        var filePath = "../../../../Server/Mappers/UserRoleMapper.cs";
        SaveToFile(filePath, generatedCode);
        Console.WriteLine($"Code has been generated and saved to {filePath}");
    }

    private static string GenerateUserRoleMapper()
    {
        var sb = new StringBuilder();

        // Warning Comment
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("// This code was generated by Drogecode.Knrm.Oefenrooster.CodeGenerator.");
        sb.AppendLine("// If required, update the tool; not this file.");
        sb.AppendLine("// ");
        sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();

        // Namespace and Usings
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Text;");
        sb.AppendLine("using Drogecode.Knrm.Oefenrooster.Server.Database.Models;");
        sb.AppendLine("using Drogecode.Knrm.Oefenrooster.Shared.Authorization;");
        sb.AppendLine("using Drogecode.Knrm.Oefenrooster.Shared.Models.UserRole;");
        sb.AppendLine();
        sb.AppendLine("namespace Drogecode.Knrm.Oefenrooster.Server.Mappers");
        sb.AppendLine("{");

        // Internal static class definition
        sb.AppendLine("    internal static class UserRoleMapper");
        sb.AppendLine("    {");

        // ToDrogeUserRole method
        sb.AppendLine("        public static DrogeUserRole ToDrogeUserRole(this DbUserRoles dbUserRoles)");
        sb.AppendLine("        {");
        sb.AppendLine("            var drogeUserRole = new DrogeUserRole");
        sb.AppendLine("            {");
        sb.AppendLine("                Id = dbUserRoles.Id,");
        sb.AppendLine("                ExternalId = dbUserRoles.ExternalId,");
        sb.AppendLine("                Name = dbUserRoles.Name");
        sb.AppendLine("            };");
        sb.AppendLine();
        sb.AppendLine("            var roles = dbUserRoles.Accesses.Split(',');");
        sb.AppendLine();
        sb.AppendLine("            foreach (var role in roles)");
        sb.AppendLine("            {");
        sb.AppendLine("                switch (role)");
        sb.AppendLine("                {");

        // List of cases for access names
        var accessNames = typeof(AccessesNames).GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)
            .Where(field => field.DeclaringType == typeof(AccessesNames))
            .ToArray();

        var group = string.Empty;
        foreach (var field in accessNames)
        {
            string accessName = field.Name;
            if (accessName.StartsWith("GROUP_"))
            {
                group = accessName;
            }
            else if (!group.Equals("GROUP_NO_READ"))
            {
                sb.AppendLine($"                    case AccessesNames.{accessName}:");
                sb.AppendLine($"                        drogeUserRole.{accessName} = true;");
                sb.AppendLine("                        break;");
            }
        }

        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine();
        sb.AppendLine("            return drogeUserRole;");
        sb.AppendLine("        }");

        // ToDb method
        sb.AppendLine();
        sb.AppendLine("        public static DbUserRoles ToDb(this DrogeUserRole userRole, Guid customerId)");
        sb.AppendLine("        {");
        sb.AppendLine("            var dbUserRole = new DbUserRoles");
        sb.AppendLine("            {");
        sb.AppendLine("                Id = userRole.Id,");
        sb.AppendLine("                ExternalId = userRole.ExternalId,");
        sb.AppendLine("                CustomerId = customerId,");
        sb.AppendLine("                Name = userRole.Name");
        sb.AppendLine("            };");
        sb.AppendLine();
        sb.AppendLine("            var sb = new StringBuilder();");

        // Adding access checks in the ToDb method
        foreach (var field in accessNames)
        {
            string accessName = field.Name;
            if (accessName.StartsWith("GROUP_"))
            {
                group = accessName;
            }
            else if (!group.Equals("GROUP_NO_READ"))
            {
                sb.AppendLine($"            if (userRole.{accessName})");
                sb.AppendLine($"                sb.Append(AccessesNames.{accessName}).Append(',');");
            }
        }

        sb.AppendLine();
        sb.AppendLine("            dbUserRole.Accesses = sb.ToString().Trim(',');");
        sb.AppendLine();
        sb.AppendLine("            return dbUserRole;");
        sb.AppendLine("        }");

        // End of class and namespace
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void SaveToFile(string filePath, string content)
    {
        try
        {
            File.WriteAllText(filePath, content);
            Console.WriteLine("File saved successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving file: {ex.Message}");
        }
    }
}