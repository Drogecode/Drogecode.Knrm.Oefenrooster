// <auto-generated />
using System;
using System.Collections.Generic;
using Drogecode.Knrm.Oefenrooster.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drogecode.Knrm.Oefenrooster.Server.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250304180001_ImproveLinkUserCustomer")]
    partial class ImproveLinkUserCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuditType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ObjectKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomerSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerSettings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientIdLogin")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientIdServer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientSecretLogin")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientSecretServer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Domain")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Instance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ClientIdLogin = "a9c68159-901c-449a-83e0-85243364e3cc",
                            ClientIdServer = "220e1008-1131-4e82-a388-611cd773ddf8",
                            ClientSecretLogin = "",
                            ClientSecretServer = "",
                            Created = new DateTime(2022, 10, 12, 18, 12, 5, 0, DateTimeKind.Utc),
                            Domain = "hui.nu",
                            Instance = "https://login.microsoftonline.com/",
                            Name = "KNRM Huizen",
                            TenantId = "d9754755-b054-4a9c-a77f-da42a4009365",
                            TimeZone = "Europe/Amsterdam"
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkExchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalendarEventId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSet")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LinkExchange");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LinkUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LinkedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LinkedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("LinkUserCustomer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserDayItem", b =>
                {
                    b.Property<Guid>("DayItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CalendarEventId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("DayItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LinkUserDayItems");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSet")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SetExternal")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("LinkUserRoles");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserUser", b =>
                {
                    b.Property<Guid>("UserAId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserBId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LinkType")
                        .HasColumnType("integer");

                    b.HasKey("UserAId", "UserBId");

                    b.HasIndex("UserBId");

                    b.ToTable("LinkUserUsers");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkVehicleTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoosterTrainingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoosterTrainingId");

                    b.HasIndex("VehicleId");

                    b.ToTable("LinkVehicleTraining");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<char?>("AddLoginHint")
                        .HasColumnType("character(1)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TargetBlank")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Url")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bf106c9-eae7-4a0d-978d-54af6c4e96a1"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsGroup = true,
                            Order = 10,
                            TargetBlank = false,
                            Text = "Handige links",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("af84e214-7def-45ac-95c9-c8a66d1573a2"),
                            AddLoginHint = '?',
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsGroup = false,
                            Order = 20,
                            ParentId = new Guid("2bf106c9-eae7-4a0d-978d-54af6c4e96a1"),
                            TargetBlank = true,
                            Text = "Sharepoint",
                            Url = "https://dorus1824.sharepoint.com"
                        },
                        new
                        {
                            Id = new Guid("953de109-5526-433b-8dc8-61b10fa8fd20"),
                            AddLoginHint = '&',
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsGroup = false,
                            Order = 30,
                            ParentId = new Guid("2bf106c9-eae7-4a0d-978d-54af6c4e96a1"),
                            TargetBlank = true,
                            Text = "LPLH",
                            Url = "https://dorus1824.sharepoint.com/:b:/r/sites/KNRM/Documenten/EHBO/LPLH/20181115%20LPLH_KNRM_1_1.pdf?csf=1&web=1&e=4L3VPo"
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbPreComAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alert")
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Raw")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SendTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("PreComAlert");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbPreComForward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("PreComForward");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Boat")
                        .HasColumnType("text");

                    b.Property<string>("CallMadeBy")
                        .HasColumnType("text");

                    b.Property<string>("Causes")
                        .HasColumnType("text");

                    b.Property<DateTime>("Commencement")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Completedby")
                        .HasColumnType("text");

                    b.Property<double?>("CountAnimals")
                        .HasColumnType("double precision");

                    b.Property<double?>("CountSailors")
                        .HasColumnType("double precision");

                    b.Property<double?>("CountSaved")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForTheBenefitOf")
                        .HasColumnType("text");

                    b.Property<string>("FunctioningMaterial")
                        .HasColumnType("text");

                    b.Property<double?>("GolfHight")
                        .HasColumnType("double precision");

                    b.Property<string>("Implications")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Number")
                        .HasColumnType("double precision");

                    b.Property<string>("OdataEtag")
                        .HasColumnType("text");

                    b.Property<string>("Prio")
                        .HasColumnType("text");

                    b.Property<string>("ProblemsWithWeed")
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int?>("Sight")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalFullHours")
                        .HasColumnType("integer");

                    b.Property<double>("TotalMinutes")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<double?>("WaterTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WeatherCondition")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<int?>("WindPower")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReportActions");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportActionShared", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.PrimitiveCollection<List<string>>("Search")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<Guid>>("SelectedUsers")
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Types")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReportActionShared");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Boat")
                        .HasColumnType("text");

                    b.Property<DateTime>("Commencement")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FunctioningMaterial")
                        .HasColumnType("text");

                    b.Property<double?>("GolfHight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OdataEtag")
                        .HasColumnType("text");

                    b.Property<string>("ProblemsWithWeed")
                        .HasColumnType("text");

                    b.Property<int?>("Sight")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalFullHours")
                        .HasColumnType("integer");

                    b.Property<double>("TotalMinutes")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("TypeTraining")
                        .HasColumnType("text");

                    b.Property<double?>("WaterTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WeatherCondition")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<int?>("WindPower")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReportTrainings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbReportActionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DbReportTrainingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DrogeCodeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SharePointID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("DbReportActionId");

                    b.HasIndex("DbReportTrainingId");

                    b.ToTable("ReportUsers");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterAvailable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Assigned")
                        .HasColumnType("boolean");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<string>("CalendarEventId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSyncOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LinkExchangeId")
                        .HasColumnType("uuid");

                    b.Property<int>("SetBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserFunctionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastUpdateBy");

                    b.HasIndex("LinkExchangeId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserFunctionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RoosterAvailable");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoosterTrainingTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("ShowTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time without time zone");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<Guid>>("VehicleIds")
                        .HasColumnType("uuid[]");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoosterTrainingTypeId");

                    b.ToTable("RoosterDefault");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4142048e-82dc-4015-aab7-1b519da01238"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 10,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = new Guid("7b4693a8-ae9c-430f-9119-49a6ecbfeb54"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 20,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = new Guid("c1967b6b-1f3b-41d2-bfa4-361a71cd064c"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 30,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = new Guid("b73bd006-0d29-4d4e-b71b-2c382d5f703f"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 40,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = new Guid("860ec129-6b99-4286-b90a-a2d536377f7c"),
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Name = "In overleg",
                            Order = 50,
                            RoosterTrainingTypeId = new Guid("52260d46-c748-4ffc-b94c-2baecacbfaf4"),
                            ShowTime = false,
                            TimeEnd = new TimeOnly(17, 30, 0),
                            TimeStart = new TimeOnly(15, 0, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2023, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = new Guid("2bdaccc0-e9f7-40c1-ae76-d9ed66e4a978"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 60,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(13, 0, 0),
                            TimeStart = new TimeOnly(10, 0, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = new Guid("348c82b5-ba0d-4d31-b242-2edc1dc669c7"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 70,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(16, 0, 0),
                            TimeStart = new TimeOnly(13, 0, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = new Guid("015b9e42-e233-457e-bf26-de26c3a718ba"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 80,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(13, 0, 0),
                            TimeStart = new TimeOnly(10, 0, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = new Guid("80d8ac0c-a2f7-4dc9-af57-a0ed74b7f8df"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Order = 90,
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ShowTime = true,
                            TimeEnd = new TimeOnly(16, 0, 0),
                            TimeStart = new TimeOnly(13, 0, 0),
                            TimeZone = "Europe/Amsterdam",
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2024, 6, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 0
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterItemDay");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Month")
                        .HasColumnType("smallint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterItemMonth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("857e2ee9-8f2f-407e-9ec8-a0eaa853b957"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)1,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; GEEN",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("d7d80ee0-0e73-426f-84b2-2040057c2f7a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)1,
                            Order = 1,
                            Severity = 1,
                            Text = "Geen ingeroosterde oefeningen in verband met het winterseizoen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5208deef-4529-4a30-a00e-22737cf52183"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)2,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp;  Algemene kennis & Communicatie",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("36e33dc3-8bb8-4096-a127-c3ee04a0e694"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)3,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; SAR & Hulpverlening",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("01a17983-9bbe-4bfc-b152-f73c1869393d"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)4,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Veiligheid",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f9d140f0-58fa-4c9a-a845-0eb5bad2814f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)5,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Navigatie",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4a009dd3-db02-4668-bbb0-9a9298c23d58"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)6,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; EHBO & Procedures",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("e4c00e6b-14d5-4609-bff3-6a6533557a0b"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)7,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Techiek & Varen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7696579c-403c-4a98-b30e-b19f1e90ffd0"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)7,
                            Order = 1,
                            Severity = 1,
                            Text = "Geen ingeroosterde oefeningen in verband met het hoogseizoen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("48045049-e9cb-4d86-8f34-85578f015f76"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)8,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; ntb",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4100bf4d-368e-47d1-b652-8fec191b4934"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)8,
                            Order = 1,
                            Severity = 1,
                            Text = "Geen ingeroosterde oefeningen in verband met het hoogseizoen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("532b68c3-328f-45a2-8a7e-fdf7f9eee111"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)9,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Algemene kennis",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("40cbe7bc-4ed4-4897-8cb9-357785cb58c9"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)10,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Communicatie",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ca0fe95d-3b84-4136-bcee-ce080228c324"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)11,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; SAR en Hulpverlening",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b858e7fc-02ea-4a2a-a49d-f55c3a912c9c"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)12,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Navigatie",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("RoosterDefaultId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoosterTrainingTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("ShowTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoosterDefaultId");

                    b.HasIndex("RoosterTrainingTypeId");

                    b.ToTable("RoosterTraining");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorDark")
                        .HasColumnType("text");

                    b.Property<string>("ColorLight")
                        .HasColumnType("text");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TextColorDark")
                        .HasColumnType("text");

                    b.Property<string>("TextColorLight")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterTrainingType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ColorDark = "#ffffff4c",
                            ColorLight = "#bdbdbdff",
                            CountToTrainingTarget = true,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = true,
                            Name = "Kompas oefening",
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("80108015-87a7-4453-a1af-d81d15fe3582"),
                            ColorDark = "rgb(214,143,0)",
                            ColorLight = "rgb(214,129,0)",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "EHBO",
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("52260d46-c748-4ffc-b94c-2baecacbfaf4"),
                            ColorDark = "",
                            ColorLight = "rgb(25,169,140)",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "een op een",
                            Order = 30
                        },
                        new
                        {
                            Id = new Guid("137f2d85-8a4f-4407-ba78-d24ea1bcc181"),
                            ColorDark = "rgb(244,47,70)",
                            ColorLight = "rgb(242,28,13)",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Brandweer",
                            Order = 40,
                            TextColorDark = "#C0C0C0",
                            TextColorLight = "#FFFFFF"
                        },
                        new
                        {
                            Id = new Guid("be12f5d9-b6f9-45d5-bd5f-6b74d7706a53"),
                            ColorDark = "rgb(13,222,156)",
                            ColorLight = "rgb(0,235,98)",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "HRB oefening",
                            Order = 50
                        },
                        new
                        {
                            Id = new Guid("6153a297-9486-43de-91e8-22d107da2b21"),
                            ColorDark = "#3BB9FF",
                            ColorLight = "#ADD8E6",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Evenement",
                            Order = 60
                        },
                        new
                        {
                            Id = new Guid("61646e7b-5257-4928-87fe-f1ac8ef1ef41"),
                            ColorDark = "#5f6138",
                            ColorLight = "#919454",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Techniek",
                            Order = 70
                        },
                        new
                        {
                            Id = new Guid("68be785c-1226-4280-a110-bd87f328951f"),
                            ColorLight = "#000000",
                            CountToTrainingTarget = false,
                            CreatedBy = new Guid("04a6b34a-c517-4fa0-87b1-7fde3ebc5461"),
                            CreatedDate = new DateTime(2023, 6, 26, 12, 12, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Proeve van Bekwaamheid",
                            Order = 80,
                            TextColorDark = "#C0C0C0",
                            TextColorLight = "#FFFFFF"
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultAvailable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Assigned")
                        .HasColumnType("boolean");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoosterDefaultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DefaultGroupId");

                    b.HasIndex("RoosterDefaultId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDefaultAvailable");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDefaultGroup");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TrainingOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("TrainingTarget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserFunctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d23de705-d950-4833-8b94-aa531022d450"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = true,
                            Name = "Kompas leider",
                            Order = 10,
                            TrainingOnly = true,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("48db5dd5-cb72-4365-9bf5-959691dc54f2"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Schipper",
                            Order = 20,
                            RoleId = new Guid("f5b0bab6-6fdf-457d-855d-bbea6ea57bd5"),
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("cf6e6afa-8aa5-4b3d-8198-fb5e86faf53c"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Schipper I.O.",
                            Order = 30,
                            RoleId = new Guid("54aace50-0e1f-4c35-a1b3-87c9ff6bd743"),
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("35ad11b8-d3f2-4960-b1e8-d41aaccd188a"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Opstapper",
                            Order = 60,
                            RoleId = new Guid("afb45395-89ee-413d-9385-21962772dbda"),
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("feb3641f-9941-4db7-a202-14263d706516"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Aankomend opstapper",
                            Order = 70,
                            RoleId = new Guid("2197a054-e81f-4720-9f08-321377398cb6"),
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("322858f8-fd2c-4e62-b699-92c605adbbf2"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = true,
                            IsSpecial = false,
                            Name = "Opstapper op proef",
                            Order = 80,
                            RoleId = new Guid("2956c6f9-6b83-46eb-8890-dbb640fd5023"),
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("5c49fc5c-25eb-48c2-a746-74ac3a030d48"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "HRB Aankomend opstapper",
                            Order = 100,
                            RoleId = new Guid("f06a00e3-62c9-4ba5-baea-84a5ba10f53a"),
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("95427da1-e4d5-442e-962a-b04ab861a2c2"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Waarnemer",
                            Order = 180,
                            TrainingOnly = true,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("0a0a2c2d-15c7-4205-93a2-621de3c30db1"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Extra",
                            Order = 300,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("a23f1f39-275e-4e21-901f-4878b73d3ede"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = false,
                            IsDefault = false,
                            IsSpecial = false,
                            Name = "Inactief",
                            Order = 400,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserHolidays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHolidays");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLastCalendarUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLastCalendarUpdate");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLinkedMails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivateKey")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime?>("ActivateRequestedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActivationFailedAttempts")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLinkedMails");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLogins", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("DirectLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SharedActionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("SharedActionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserOnVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastSeenOnThisVersion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOnVersion");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Accesses")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("287359b1-2035-435b-97b0-eb260dc497d6"),
                            Accesses = "configure_training-types,users_settings,scheduler_dayitem,scheduler_monthitem,scheduler_history",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "287359b1-2035-435b-97b0-eb260dc497d6",
                            Name = "Admin",
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("f6b0c571-9050-40d6-bf58-807981e5ed6e"),
                            Accesses = "scheduler,scheduler_table,scheduler_past,scheduler_dayitem,scheduler_other,scheduler_monthitem",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "f6b0c571-9050-40d6-bf58-807981e5ed6e",
                            Name = "Scheduler",
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("90a40128-183f-408b-aa64-eb3b279a7042"),
                            Accesses = "scheduler_other",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "90a40128-183f-408b-aa64-eb3b279a7042",
                            Name = "Basic scheduler",
                            Order = 30
                        },
                        new
                        {
                            Id = new Guid("d72ed2e9-911e-4ee5-b07e-cbd5917d432b"),
                            Accesses = "users_counter,users_details,full_training_history,full_action_history",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "d72ed2e9-911e-4ee5-b07e-cbd5917d432b",
                            Name = "Users admin",
                            Order = 40
                        },
                        new
                        {
                            Id = new Guid("d526e5ed-e838-499d-a96c-62180db28bed"),
                            Accesses = "full_dashboard_statistics",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "d526e5ed-e838-499d-a96c-62180db28bed",
                            Name = "Beta user",
                            Order = 50
                        },
                        new
                        {
                            Id = new Guid("f5b0bab6-6fdf-457d-855d-bbea6ea57bd5"),
                            Accesses = "full_training_history,full_action_history,scheduler_other",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "f5b0bab6-6fdf-457d-855d-bbea6ea57bd5",
                            Name = "schipper",
                            Order = 60
                        },
                        new
                        {
                            Id = new Guid("54aace50-0e1f-4c35-a1b3-87c9ff6bd743"),
                            Accesses = "full_training_history,full_action_history,scheduler_other",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "54aace50-0e1f-4c35-a1b3-87c9ff6bd743",
                            Name = "schipper io",
                            Order = 70
                        },
                        new
                        {
                            Id = new Guid("afb45395-89ee-413d-9385-21962772dbda"),
                            Accesses = "full_training_history,full_action_history,scheduler_other",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "afb45395-89ee-413d-9385-21962772dbda",
                            Name = "opstapper",
                            Order = 80
                        },
                        new
                        {
                            Id = new Guid("2197a054-e81f-4720-9f08-321377398cb6"),
                            Accesses = "full_training_history,full_action_history,scheduler_other",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "2197a054-e81f-4720-9f08-321377398cb6",
                            Name = "aankomend opstapper",
                            Order = 90
                        },
                        new
                        {
                            Id = new Guid("f06a00e3-62c9-4ba5-baea-84a5ba10f53a"),
                            Accesses = "full_training_history,full_action_history",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "f06a00e3-62c9-4ba5-baea-84a5ba10f53a",
                            Name = "hrb aankomend opstapper",
                            Order = 100
                        },
                        new
                        {
                            Id = new Guid("2956c6f9-6b83-46eb-8890-dbb640fd5023"),
                            Accesses = "",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExternalId = "2956c6f9-6b83-46eb-8890-dbb640fd5023",
                            Name = "opstapper op proef",
                            Order = 110
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DirectLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSystemUser")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Nr")
                        .HasColumnType("integer");

                    b.Property<bool>("RoleFromSharePoint")
                        .HasColumnType("boolean");

                    b.Property<string>("SharePointID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("SyncedFromSharePoint")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserFunctionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserFunctionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4bcc37b-321a-4027-b02b-30630ad8f75e"),
                            CreatedOn = new DateTime(2024, 10, 11, 19, 46, 12, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            DirectLogin = false,
                            Email = "system@drogecode.nl",
                            IsSystemUser = true,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "System",
                            RoleFromSharePoint = false,
                            SyncedFromSharePoint = false
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Deletedby")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExchangeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4589535c-9064-4448-bc01-3b5a00e9410d"),
                            Code = "NWI",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExchangeId = new Guid("dbaeaa44-d318-464e-ac39-f85029dd9e8f"),
                            IsActive = true,
                            IsDefault = true,
                            Name = "Nikolaas Wijsenbeek",
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("c759950b-8264-4521-9a6e-ff98ad358cc1"),
                            Code = "HZR",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            ExchangeId = new Guid("731fa301-d7cc-41de-9063-f86a32c2b25b"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "De Huizer",
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("5777102a-3c9e-438e-a11f-fafb5f9649b6"),
                            Code = "HZN018",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Vlet",
                            Order = 30
                        },
                        new
                        {
                            Id = new Guid("d2b920a5-e8ec-4d47-a280-8f88eae914c1"),
                            Code = "Piet",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Pieter Houbolt",
                            Order = 40
                        },
                        new
                        {
                            Id = new Guid("f30d1856-2d26-441e-ae6d-935bb26c4852"),
                            Code = "Wal",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Wal",
                            Order = 100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbAudit", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Audits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomerSettings", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("CustomerSettings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkExchange", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("LinkExchanges")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserCustomer", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("LinkUserCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "LinkedUser")
                        .WithMany("LinkLinkedUserCustomers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("LinkUserCustomers")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LinkedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserDayItem", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", "DayItem")
                        .WithMany("LinkUserDayItems")
                        .HasForeignKey("DayItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("LinkUserDayItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserRole", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserRoles", "Role")
                        .WithMany("LinkUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("LinkUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkUserUser", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "UserA")
                        .WithMany("LinkedUserAsA")
                        .HasForeignKey("UserAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "UserB")
                        .WithMany("LinkedUserAsB")
                        .HasForeignKey("UserBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkVehicleTraining", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("LinkVehicleTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", "RoosterTraining")
                        .WithMany("LinkVehicleTrainings")
                        .HasForeignKey("RoosterTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", "Vehicles")
                        .WithMany("LinkVehicleTrainings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RoosterTraining");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbMenu", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Menus")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbMenu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Customer");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbPreComAlert", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("PreComAlerts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("PreComAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbPreComForward", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("PreComForwards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("PreComForwards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportAction", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("ReportActions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportActionShared", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("ReportActionShares")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportTraining", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("ReportTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportUser", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportAction", "Action")
                        .WithMany("Users")
                        .HasForeignKey("DbReportActionId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportTraining", "Training")
                        .WithMany("Users")
                        .HasForeignKey("DbReportTrainingId");

                    b.Navigation("Action");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterAvailable", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "LastUpdateByUser")
                        .WithMany("TrainingAvailableLastUpdated")
                        .HasForeignKey("LastUpdateBy");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkExchange", "LinkExchange")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("LinkExchangeId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", "Training")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", "UserFunction")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("UserFunctionId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", "Vehicle")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Customer");

                    b.Navigation("LastUpdateByUser");

                    b.Navigation("LinkExchange");

                    b.Navigation("Training");

                    b.Navigation("User");

                    b.Navigation("UserFunction");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterDefaults")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", "RoosterTrainingType")
                        .WithMany("RoosterDefaults")
                        .HasForeignKey("RoosterTrainingTypeId");

                    b.Navigation("Customer");

                    b.Navigation("RoosterTrainingType");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterItemDays")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemMonth", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterItemMonths")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "DeletedByUser")
                        .WithMany("TrainingsDeleted")
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", "RoosterDefault")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("RoosterDefaultId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", "RoosterTrainingType")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("RoosterTrainingTypeId");

                    b.Navigation("Customer");

                    b.Navigation("DeletedByUser");

                    b.Navigation("RoosterDefault");

                    b.Navigation("RoosterTrainingType");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterTrainingTypes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultAvailable", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultGroup", "DefaultGroup")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("DefaultGroupId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", "RoosterDefault")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("RoosterDefaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DefaultGroup");

                    b.Navigation("RoosterDefault");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultGroup", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserDefaultGroups")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserDefaultGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserFunctions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserHolidays", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserHolidays")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserHolidays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLastCalendarUpdate", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserLastCalendarUpdates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserLastCalendarUpdates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLinkedMails", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserLinkedMails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserLinkedMails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserLogins", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportActionShared", "SharedAction")
                        .WithMany("Logins")
                        .HasForeignKey("SharedActionId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId");

                    b.Navigation("SharedAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserOnVersion", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserOnVersions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserOnVersions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserRoles", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserSettings", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserSettings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", "UserFunction")
                        .WithMany("Users")
                        .HasForeignKey("UserFunctionId");

                    b.Navigation("Customer");

                    b.Navigation("UserFunction");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("CustomerSettings");

                    b.Navigation("LinkExchanges");

                    b.Navigation("LinkUserCustomers");

                    b.Navigation("LinkVehicleTrainings");

                    b.Navigation("Menus");

                    b.Navigation("PreComAlerts");

                    b.Navigation("PreComForwards");

                    b.Navigation("ReportActionShares");

                    b.Navigation("ReportActions");

                    b.Navigation("ReportTrainings");

                    b.Navigation("RoosterAvailables");

                    b.Navigation("RoosterDefaults");

                    b.Navigation("RoosterItemDays");

                    b.Navigation("RoosterItemMonths");

                    b.Navigation("RoosterTrainingTypes");

                    b.Navigation("RoosterTrainings");

                    b.Navigation("UserDefaultAvailables");

                    b.Navigation("UserDefaultGroups");

                    b.Navigation("UserFunctions");

                    b.Navigation("UserHolidays");

                    b.Navigation("UserLastCalendarUpdates");

                    b.Navigation("UserLinkedMails");

                    b.Navigation("UserOnVersions");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSettings");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkExchange", b =>
                {
                    b.Navigation("RoosterAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbMenu", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportAction", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportActionShared", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbReportTraining", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.Navigation("RoosterTrainings");

                    b.Navigation("UserDefaultAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", b =>
                {
                    b.Navigation("LinkUserDayItems");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.Navigation("LinkVehicleTrainings");

                    b.Navigation("RoosterAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.Navigation("RoosterDefaults");

                    b.Navigation("RoosterTrainings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultGroup", b =>
                {
                    b.Navigation("UserDefaultAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.Navigation("RoosterAvailables");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserRoles", b =>
                {
                    b.Navigation("LinkUserRoles");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUsers", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("LinkLinkedUserCustomers");

                    b.Navigation("LinkUserCustomers");

                    b.Navigation("LinkUserDayItems");

                    b.Navigation("LinkUserRoles");

                    b.Navigation("LinkedUserAsA");

                    b.Navigation("LinkedUserAsB");

                    b.Navigation("Logins");

                    b.Navigation("PreComAlerts");

                    b.Navigation("PreComForwards");

                    b.Navigation("RoosterAvailables");

                    b.Navigation("TrainingAvailableLastUpdated");

                    b.Navigation("TrainingsDeleted");

                    b.Navigation("UserDefaultAvailables");

                    b.Navigation("UserDefaultGroups");

                    b.Navigation("UserHolidays");

                    b.Navigation("UserLastCalendarUpdates");

                    b.Navigation("UserLinkedMails");

                    b.Navigation("UserOnVersions");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.Navigation("LinkVehicleTrainings");

                    b.Navigation("RoosterAvailables");
                });
#pragma warning restore 612, 618
        }
    }
}
