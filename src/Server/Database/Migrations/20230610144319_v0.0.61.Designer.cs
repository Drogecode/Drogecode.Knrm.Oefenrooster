// <auto-generated />
using System;
using Drogecode.Knrm.Oefenrooster.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drogecode.Knrm.Oefenrooster.Server.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230610144319_v0.0.61")]
    partial class v0061
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserFunctionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserFunctionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuditType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ObjectKey")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Created = new DateTime(2022, 10, 12, 18, 12, 5, 0, DateTimeKind.Utc),
                            Name = "KNRM Huizen"
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkVehicleTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoosterTrainingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Vehicle")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LinkVehicleTraining");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterAvailable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Assigned")
                        .HasColumnType("boolean");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SetBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserFunctionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserFunctionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RoosterAvailable");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoosterTrainingTypeId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoosterTrainingTypeId");

                    b.ToTable("RoosterDefault");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4142048e-82dc-4015-aab7-1b519da01238"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = new Guid("7b4693a8-ae9c-430f-9119-49a6ecbfeb54"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = new Guid("c1967b6b-1f3b-41d2-bfa4-361a71cd064c"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = new Guid("b73bd006-0d29-4d4e-b71b-2c382d5f703f"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(21, 30, 0),
                            TimeStart = new TimeOnly(19, 30, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = new Guid("2bdaccc0-e9f7-40c1-ae76-d9ed66e4a978"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(13, 0, 0),
                            TimeStart = new TimeOnly(10, 0, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = new Guid("348c82b5-ba0d-4d31-b242-2edc1dc669c7"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(16, 0, 0),
                            TimeStart = new TimeOnly(13, 0, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = new Guid("015b9e42-e233-457e-bf26-de26c3a718ba"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(13, 0, 0),
                            TimeStart = new TimeOnly(10, 0, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = new Guid("80d8ac0c-a2f7-4dc9-af57-a0ed74b7f8df"),
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            RoosterTrainingTypeId = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            TimeEnd = new TimeOnly(16, 0, 0),
                            TimeStart = new TimeOnly(13, 0, 0),
                            ValidFrom = new DateTime(2022, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ValidUntil = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            WeekDay = 0
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterItemDay");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<short>("Month")
                        .HasColumnType("smallint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterItemMonth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("857e2ee9-8f2f-407e-9ec8-a0eaa853b957"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)1,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; GEEN",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("d7d80ee0-0e73-426f-84b2-2040057c2f7a"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)1,
                            Order = 1,
                            Severity = 1,
                            Text = "Geen ingeroosterde oefeningen in verband met het winterseizoen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5208deef-4529-4a30-a00e-22737cf52183"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)2,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp;  Algemene kennis & Communicatie",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("36e33dc3-8bb8-4096-a127-c3ee04a0e694"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)3,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; SAR & Hulpverlening",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("01a17983-9bbe-4bfc-b152-f73c1869393d"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)4,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Veiligheid",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f9d140f0-58fa-4c9a-a845-0eb5bad2814f"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)5,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Navigatie",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4a009dd3-db02-4668-bbb0-9a9298c23d58"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)6,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; EHBO & Procedures",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("e4c00e6b-14d5-4609-bff3-6a6533557a0b"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)7,
                            Order = 0,
                            Severity = 0,
                            Text = "KNRM Kompas onderwerp; Techiek & Varen",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("7696579c-403c-4a98-b30e-b19f1e90ffd0"),
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Month = (short)7,
                            Order = 1,
                            Severity = 1,
                            Text = "Geen ingeroosterde oefeningen in verband met het hoogseizoen",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Pin")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoosterDefaultId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoosterTrainingTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoosterDefaultId");

                    b.HasIndex("RoosterTrainingTypeId");

                    b.ToTable("RoosterTraining");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorDark")
                        .HasColumnType("text");

                    b.Property<string>("ColorLight")
                        .HasColumnType("text");

                    b.Property<bool>("CountToTrainingTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TextColorDark")
                        .HasColumnType("text");

                    b.Property<string>("TextColorLight")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RoosterTrainingType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dd5bf75-aef4-4cdd-9515-112e9b51f2f0"),
                            ColorDark = "#ffffff4c",
                            ColorLight = "#bdbdbdff",
                            CountToTrainingTarget = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = true,
                            Name = "Kompas oefening",
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("80108015-87a7-4453-a1af-d81d15fe3582"),
                            ColorDark = "rgb(214,143,0)",
                            ColorLight = "rgb(214,129,0)",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "EHBO",
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("52260d46-c748-4ffc-b94c-2baecacbfaf4"),
                            ColorDark = "",
                            ColorLight = "rgb(25,169,140)",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "een op een",
                            Order = 30
                        },
                        new
                        {
                            Id = new Guid("137f2d85-8a4f-4407-ba78-d24ea1bcc181"),
                            ColorDark = "rgb(244,47,70)",
                            ColorLight = "rgb(242,28,13)",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Brandweer",
                            Order = 40,
                            TextColorDark = "#C0C0C0",
                            TextColorLight = "#FFFFFF"
                        },
                        new
                        {
                            Id = new Guid("be12f5d9-b6f9-45d5-bd5f-6b74d7706a53"),
                            ColorDark = "rgb(13,222,156)",
                            ColorLight = "rgb(0,235,98)",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "HRB oefening",
                            Order = 50
                        },
                        new
                        {
                            Id = new Guid("6153a297-9486-43de-91e8-22d107da2b21"),
                            ColorDark = "#3BB9FF",
                            ColorLight = "#ADD8E6",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Evenement",
                            Order = 60
                        },
                        new
                        {
                            Id = new Guid("61646e7b-5257-4928-87fe-f1ac8ef1ef41"),
                            ColorDark = "#5f6138",
                            ColorLight = "#919454",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Techniek",
                            Order = 70
                        },
                        new
                        {
                            Id = new Guid("68be785c-1226-4280-a110-bd87f328951f"),
                            ColorLight = "#000000",
                            CountToTrainingTarget = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Proeve van Bekwaamheid",
                            Order = 80,
                            TextColorDark = "#C0C0C0",
                            TextColorLight = "#FFFFFF"
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultAvailable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoosterDefaultId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Till")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoosterDefaultId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDefaultAvailable");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("TrainingOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("TrainingTarget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserFunctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d23de705-d950-4833-8b94-aa531022d450"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Kompas leider",
                            Order = 10,
                            TrainingOnly = true,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("48db5dd5-cb72-4365-9bf5-959691dc54f2"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Schipper",
                            Order = 20,
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("cf6e6afa-8aa5-4b3d-8198-fb5e86faf53c"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Schipper I.O.",
                            Order = 30,
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("35ad11b8-d3f2-4960-b1e8-d41aaccd188a"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Opstapper",
                            Order = 60,
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("feb3641f-9941-4db7-a202-14263d706516"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Aankomend opstapper",
                            Order = 70,
                            TrainingOnly = false,
                            TrainingTarget = 2
                        },
                        new
                        {
                            Id = new Guid("322858f8-fd2c-4e62-b699-92c605adbbf2"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = true,
                            Name = "Opstapper op proef",
                            Order = 80,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("5c49fc5c-25eb-48c2-a746-74ac3a030d48"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "HRB Aankomend opstapper",
                            Order = 100,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("95427da1-e4d5-442e-962a-b04ab861a2c2"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Waarnemer",
                            Order = 180,
                            TrainingOnly = true,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("0a0a2c2d-15c7-4205-93a2-621de3c30db1"),
                            Active = true,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Extra",
                            Order = 300,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        },
                        new
                        {
                            Id = new Guid("a23f1f39-275e-4e21-901f-4878b73d3ede"),
                            Active = false,
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            Default = false,
                            Name = "Inactief",
                            Order = 400,
                            TrainingOnly = false,
                            TrainingTarget = 0
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserHolidays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Till")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHolidays");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4589535c-9064-4448-bc01-3b5a00e9410d"),
                            Active = true,
                            Code = "NWI",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = true,
                            Name = "Nikolaas Wijsenbeek",
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("c759950b-8264-4521-9a6e-ff98ad358cc1"),
                            Active = true,
                            Code = "HZR",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "De Huizer",
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("5777102a-3c9e-438e-a11f-fafb5f9649b6"),
                            Active = true,
                            Code = "HZN018",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Vlet",
                            Order = 30
                        },
                        new
                        {
                            Id = new Guid("f30d1856-2d26-441e-ae6d-935bb26c4852"),
                            Active = true,
                            Code = "Wal",
                            CustomerId = new Guid("d9754755-b054-4a9c-a77f-da42a4009365"),
                            IsDefault = false,
                            Name = "Wal",
                            Order = 100
                        });
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", "UserFunction")
                        .WithMany("Users")
                        .HasForeignKey("UserFunctionId");

                    b.Navigation("Customer");

                    b.Navigation("UserFunction");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbAudit", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Audits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbLinkVehicleTraining", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("LinkVehicleTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterAvailable", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", "Training")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", "UserFunction")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("UserFunctionId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", "User")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", "Vehicle")
                        .WithMany("RoosterAvailables")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Customer");

                    b.Navigation("Training");

                    b.Navigation("User");

                    b.Navigation("UserFunction");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterDefaults")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", "RoosterTrainingType")
                        .WithMany("RoosterDefaults")
                        .HasForeignKey("RoosterTrainingTypeId");

                    b.Navigation("Customer");

                    b.Navigation("RoosterTrainingType");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemDay", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterItemDays")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterItemMonth", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterItemMonths")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", "RoosterDefault")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("RoosterDefaultId");

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", "RoosterTrainingType")
                        .WithMany("RoosterTrainings")
                        .HasForeignKey("RoosterTrainingTypeId");

                    b.Navigation("Customer");

                    b.Navigation("RoosterDefault");

                    b.Navigation("RoosterTrainingType");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("RoosterTrainingTypes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserDefaultAvailable", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", "RoosterDefault")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("RoosterDefaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", "User")
                        .WithMany("UserDefaultAvailables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RoosterDefault");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserFunctions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserHolidays", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("UserHolidays")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", "User")
                        .WithMany("UserHolidays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.HasOne("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Database.Models.DbUsers", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("RoosterAvailables");

                    b.Navigation("UserDefaultAvailables");

                    b.Navigation("UserHolidays");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbCustomers", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("LinkVehicleTrainings");

                    b.Navigation("RoosterAvailables");

                    b.Navigation("RoosterDefaults");

                    b.Navigation("RoosterItemDays");

                    b.Navigation("RoosterItemMonths");

                    b.Navigation("RoosterTrainingTypes");

                    b.Navigation("RoosterTrainings");

                    b.Navigation("UserDefaultAvailables");

                    b.Navigation("UserFunctions");

                    b.Navigation("UserHolidays");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterDefault", b =>
                {
                    b.Navigation("RoosterTrainings");

                    b.Navigation("UserDefaultAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTraining", b =>
                {
                    b.Navigation("RoosterAvailables");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbRoosterTrainingType", b =>
                {
                    b.Navigation("RoosterDefaults");

                    b.Navigation("RoosterTrainings");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbUserFunctions", b =>
                {
                    b.Navigation("RoosterAvailables");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Drogecode.Knrm.Oefenrooster.Server.Database.Models.DbVehicles", b =>
                {
                    b.Navigation("RoosterAvailables");
                });
#pragma warning restore 612, 618
        }
    }
}
