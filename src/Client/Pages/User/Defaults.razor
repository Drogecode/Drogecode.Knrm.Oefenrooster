@page "/user/defaults"
@attribute [Authorize]
@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.DefaultSchedule;
<PageTitle>@L["Default schedule"]</PageTitle>

@if (_defaultSchedules is not null)
{
    <MudDataGrid Items="@_defaultSchedules.OrderBy(x=> x.Order).ThenBy(x=>x.TimeStart)">
        <Columns>
            <HierarchyColumn T="DefaultSchedule" />
            <PropertyColumn Property="x => x.WeekDay" Title="@L["Weekday"]">
                <CellTemplate>
                    @LApp[context.Item.WeekDay.ToString() ?? "None"]
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TimeStart" Title="@L["TimeStart"]" />
            <PropertyColumn Property="x => x.TimeEnd" Title="@L["TimeEnd"]" />
            <TemplateColumn Title="@L["Current setting"]">
                <CellTemplate>
                    @LApp[context.Item.UserSchedules?.FirstOrDefault()?.Available.ToString() ?? ""]
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            @if (context.Item?.UserSchedules is not null && context.Item.UserSchedules.Count > 0)
            {
                <MudDataGrid T="DefaultUserSchedule" Items="@context.Item.UserSchedules" Context="innerContext" EditMode="DataGridEditMode.Cell" EditTrigger="@DataGridEditTrigger.Manual"
                             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                             ReadOnly="false" Bordered="true" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.ValidFromUser" Title="@L["ValidFrom"]" />
                        <PropertyColumn Property="x => x.ValidUntilUser" Title="@L["ValidUntil"]" />
                    </Columns>
                </MudDataGrid>
                foreach (var schedule in context.Item.UserSchedules)
                {
                    @LApp[schedule.Available.ToString() ?? "None"]
                }
            }
            else
            {
                <MudText>No default configuration</MudText>
            }
            @* <MudCard>
        <MudCardHeader>
        <CardHeaderContent>
        <MudText Typo="Typo.h6">@L["Configure your default availabilty here"]</MudText>
        </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <MudSelect T="Availabilty?" Variant="Variant.Text" @bind-Value="context.Item.Available" SelectedValuesChanged="()=>OnChange(context.Item)" AdornmentColor="@PlannerHelper.ColorAvailabilty(context.Item.Available)">
        <MudSelectItem T="Availabilty?" Value="Availabilty.None">@LApp["None"]</MudSelectItem>
        <MudSelectItem T="Availabilty?" Value="Availabilty.Available">@LApp["Available"]</MudSelectItem>
        <MudSelectItem T="Availabilty?" Value="Availabilty.NotAvailable">@LApp["NotAvailable"]</MudSelectItem>
        <MudSelectItem T="Availabilty?" Value="Availabilty.Maybe">@LApp["Maybe"]</MudSelectItem>
        </MudSelect>
        </MudCardContent>
        </MudCard> *@
        </ChildRowContent>
    </MudDataGrid>
}
else
{
    <MudSkeleton />
    <MudSkeleton />
    <MudSkeleton />
    <MudSkeleton />
}