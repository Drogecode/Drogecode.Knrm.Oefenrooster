@page "/user/settings"
@using Drogecode.Knrm.Oefenrooster.Shared.Enums
@attribute [Authorize]

<PageTitle>@L["Settings"]</PageTitle>
<MudText Typo="Typo.h5">@L["Settings"]</MudText>

<MudPaper Class="pa-4" MaxWidth="800px">
    <CultureSelector/>
    <AuthorizeView Roles="@(AccessesNames.AUTH_scheduler_delay_sync + "," + AccessesNames.AUTH_super_user)">
        <MudText Typo="Typo.h5">@L["Calendar"]</MudText>
        @if (_delaySyncingTrainingToOutlook is not null)
        {
            <MudSwitch Label="@L["Delay syncing to users with external calendar"]" Color="Color.Primary" T="bool" Value="@_delaySyncingTrainingToOutlook.Value"
                       ValueChanged="@(async (isChecked) => await PatchSetting(isChecked, SettingName.DelaySyncingTrainingToOutlook))"/>
        }
        <AuthorizeView Roles="@AccessesNames.AUTH_super_user" Context="inner"> 
            @if (_settingTrainingToCalendar is not null)
            {
                <MudSwitch Label="@L["Sync training to outlook calendar"]" Color="Color.Primary" T="bool" Value="@_settingTrainingToCalendar.Value"
                           ValueChanged="@(async (isChecked) => await PatchSetting(isChecked, SettingName.TrainingToCalendar))"/>
            }
        </AuthorizeView>
    </AuthorizeView>
    <AuthorizeView Roles="@AccessesNames.AUTH_precom_sync_calendar">
        <MudText Typo="Typo.h5">@L["PreCom"]</MudText>
        @if (_settingPreComSyncCalendar is not null)
        {
            <MudSwitch Label="@L["Sync PreCom with outlook calendar"]" Color="Color.Primary" T="bool" Value="@_settingPreComSyncCalendar.Value"
                       ValueChanged="@(async (isChecked) => await PatchSetting(isChecked, SettingName.SyncPreComWithCalendar))"/>
        }
        @if (_settingSyncPreComDeleteOld is not null)
        {
            <MudSwitch Label="@L["Delete old PreCom from outlook"]" Color="Color.Primary" T="bool" Value="@_settingSyncPreComDeleteOld.Value"
                       ValueChanged="@(async (isChecked) => await PatchSetting(isChecked, SettingName.SyncPreComDeleteOld))"/>
        }
        @if (_syncPreComWithExternal is not null)
        {
            <MudSwitch Label="@L["Sync PreCom with external calendars, configured below"]" Color="Color.Primary" T="bool" Value="@_syncPreComWithExternal.Value"
                       ValueChanged="@(async (isChecked) => await PatchSetting(isChecked, SettingName.SyncPreComWithExternal))"/>
        }
        @if (_preComAvailableText is not null)
        {
            <MudTextField Label="@L["PreCom Available calendar text"]" T="string" Value="_preComAvailableText" ValueChanged="PatchPreComAvailableText"
                          Counter="@DefaultSettingsHelper.MAX_LENGTH_PRE_COM_AVAILABLE_TEXT" MaxLength="@DefaultSettingsHelper.MAX_LENGTH_PRE_COM_AVAILABLE_TEXT"/>
        }
    </AuthorizeView>
    <MudText>
        <table class="table-auto">
            <tbody>
            <tr>
                <td>@L["Client version:"]</td>
                <td>@DefaultSettingsHelper.CURRENT_VERSION</td>
            </tr>
            @if (_updateDetails is not null)
            {
                <tr>
                    <td>@L["Server version:"]</td>
                    <td>@_updateDetails.CurrentVersion</td>
                </tr>
            }
            </tbody>
        </table>
    </MudText>
    <AuthorizeView Roles="@AccessesNames.AUTH_mail_invite_external" Context="inner">
        <MudText>@L["Mails to invite to your trainings"]</MudText>
        <MudButton Variant="Variant.Filled" OnClick='(() => Navigation.NavigateTo("/user/settings/link-mail/add"))'>@L["Add link mail"]</MudButton>
        @if (_allUserLinkedMailResponse?.UserLinkedMails is not null && _allUserLinkedMailResponse.UserLinkedMails.Any())
        {
            <MudDataGrid Items="@_allUserLinkedMailResponse.UserLinkedMails!.OrderBy(x => x.ActivateRequestedOn)" Striped="true" Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.Email" Title="@L["Email"]"/>
                    <PropertyColumn Property="x => x.IsEnabled" Title="@L["Is enabled"]">
                        <CellTemplate Context="templateContext">
                            <MudCheckBox T="bool" Disabled="!templateContext.Item.IsActive || templateContext.Item.IsDrogeCodeUser" Value="templateContext.Item.IsEnabled"
                                         ValueChanged="(newValue)=>IsEnabledChanged(newValue, templateContext.Item.Id)"/>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.IsActive" Title="@L["Is active"]">
                        <CellTemplate Context="templateContext">
                            @if (templateContext.Item.IsActive)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.ThumbUp"/>
                            }
                            else
                            {
                                <MudButton OnClick="()=>OpenActivationDialog(templateContext.Item.Id)">@L["Activate"]</MudButton>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x =>x" Title="@L["Delete"]">
                        <CellTemplate>
                            @if (!context.Item.IsDrogeCodeUser)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => { await DeleteMailLink(context.Item); })" />
                            }
                        </Celltemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        }
    </AuthorizeView>
</MudPaper>