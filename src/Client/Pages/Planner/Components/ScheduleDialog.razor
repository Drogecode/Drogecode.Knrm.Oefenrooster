@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Schedule;
<MudDialog>
    <DialogContent>
        @if (Vehicles?.Count > 0)
        {
            var hasVehicle = false;
            <MudText Typo="Typo.h4">@L["Selected vehicles"]</MudText>
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-1">
                @foreach (var vehicle in Vehicles)
                {
                    var vehicleLink = _linkVehicleTraining?.FirstOrDefault(x => x.VehicleId == vehicle.Id);
                    @if (vehicleLink?.IsSelected == true || (vehicle.IsDefault && vehicleLink == null))
                    {
                        hasVehicle = true;
                        <MudItem>
                            <MudText Typo="Typo.body1">
                                @vehicle.Name
                            </MudText>
                        </MudItem>
                    }
                }
                @if (!hasVehicle)
                {
                    <MudItem>
                        <MudText Typo="Typo.body1" Color="Color.Warning">
                            @L["No vehicle selected"]
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
        }
        @if (Functions != null && Users != null)
        {
            @if (Planner.PlanUsers.Any(x => x.Assigned))
            {
                <MudText Typo="Typo.h5">
                    @LApp["Assigned"]
                </MudText>
            }
            @foreach (var function in Functions.OrderBy(x => x.Order))
            {
                @foreach (var user in Planner.PlanUsers.Where(x => x.Assigned && x.PlannedFunctionId == function.Id))
                {
                    <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                        <MudItem xs="12" sm="@(_colmn1 * 2)" md="@_colmn1">
                            <MudButtonGroup Variant="Variant.Text">
                                <MudButton Disabled="@(!_canEdit)" StartIcon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Filled" OnClick="()=>CheckChanged(false, user,function.Id)" IconColor="GetColor(user.Availabilty)" Tag="user" />
                                <MudButton Disabled="@(!_canEdit)" StartIcon="@Icons.Material.Filled.HowToReg" Variant="Variant.Filled" OnClick="()=>ClickLeader(user)" IconColor="user.PlannedFunctionId.Equals(DefaultSettingsHelper.KompasLeiderId) ? Color.Info : Color.Inherit" Tag="user" />
                            </MudButtonGroup>
                        </MudItem>
                        <MudItem xs="12" sm="@(_colmn2 * 2)" md="@_colmn2">
                            <MudText Typo="Typo.body1">@user.Name</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="@(_colmn3 * 2)" md="@_colmn3">
                            <MudText Typo="Typo.body2" @onclick="()=>{if (!_canEdit) return; user.ClickedFunction = !user.ClickedFunction;}">
                                @LApp[@user.Availabilty.ToString() ?? ""]  @(" - ") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name
                            </MudText>
                            @if (user.ClickedFunction)
                            {
                                <MudSelect Disabled="@(!_canEdit)" T="Guid?" Label="@LApp["function"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@user.PlannedFunctionId" ValueChanged="(e)=>FunctionSelectionChanged(user, e)">
                                    @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                                    {
                                        <MudSelectItem T="Guid?" Value="@function.Id">@function.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </MudItem>
                        @if (_vehicleInfoForThisTraining != null && _vehicleCount > 0)
                        {
                            <MudItem xs="12" sm="@(_colmn4 * 2)" md="@_colmn4">
                                @if (_vehicleCount > 1)
                                {
                                    @if (user.VehicleId == null && _vehicleInfoForThisTraining.Any(x => x.IsDefault))
                                    {
                                        user.VehicleId = _vehicleInfoForThisTraining.FirstOrDefault(x => x.IsDefault)!.Id;
                                    }
                                    <MudSelect Disabled="@(!_canEdit)" T="Guid?" Label="@L["vehicle"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@user.VehicleId" ValueChanged="(e)=>VehicleSelectionChanged(user, e)">
                                        @foreach (var vehicle in _vehicleInfoForThisTraining)
                                        {
                                            <MudSelectItem T="Guid?" Value="@vehicle.Id">@vehicle.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                                else
                                {
                                    <MudText>
                                        @_vehicleInfoForThisTraining![0].Name
                                    </MudText>
                                }
                            </MudItem>
                        }
                        @if (user.PlannedFunctionId != Guid.Empty && user.UserFunctionId != user.PlannedFunctionId)
                        {
                            <MudItem xs="12" sm="@(_colmn5 * 2)" md="@_colmn5">
                                <MudText Typo="Typo.body2">
                                    @($"{LApp["as"]} {Functions.FirstOrDefault(x => x.Id == user.PlannedFunctionId)?.Name}")
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                }
            }
            @if (_canEdit)
            {
                @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available))
                {
                    <MudText Typo="Typo.h5">
                        @LApp["Available"]
                    </MudText>
                }
                @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                {
                    @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available && x.PlannedFunctionId == function.Id))
                    {
                        <MudText Typo="Typo.h6">
                            @function.Name
                        </MudText>
                        @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available && x.PlannedFunctionId == function.Id))
                        {
                            <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                <MudItem xs="@_colmn1">
                                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Color="GetColor(user.Availabilty)" Tag="user" />
                                </MudItem>
                                <MudItem xs="@_colmn2">
                                    <MudText>@user.Name</MudText>
                                </MudItem>
                                <MudItem xs="@_colmn3">
                                    <MudText Typo="Typo.subtitle2">
                                        @LApp[(user.Availabilty ?? Availabilty.None).ToString()]
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                }
                @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty != Availabilty.Available) || Users.Any(x => !Planner.PlanUsers.Any(y => y.UserId == x.Id)))
                {
                    <MudText Typo="Typo.h5">
                        @L["Other users"]
                    </MudText>
                }
                @if (_plannerIsUpdated)
                {
                    @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                    {
                        @if (Users.Any(x => x.UserFunctionId == function.Id) || Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty != Availabilty.Available && x.PlannedFunctionId == function.Id))
                        {
                            <MudText Typo="Typo.h6">
                                @function.Name
                            </MudText>
                            @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availabilty != Availabilty.Available && x.PlannedFunctionId == function.Id).OrderBy(o => o.Availabilty))
                            {
                                <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                    <MudItem xs="@_colmn1">
                                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Color="GetColor(user.Availabilty)" Tag="user" />
                                    </MudItem>
                                    <MudItem xs="@_colmn2">
                                        <MudText>@user.Name</MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn3">
                                        <MudText Typo="Typo.subtitle2">
                                            @LApp[(user.Availabilty ?? Availabilty.None).ToString()]
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                            @foreach (var user in Users.Where(x => x.UserFunctionId == function.Id))
                            {
                                @if (Planner.PlanUsers.Any(x => x.UserId == user.Id)) continue;
                                <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                    <MudItem xs="@_colmn1">
                                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Tag="user" />
                                    </MudItem>
                                    <MudItem xs="@_colmn2">
                                        <MudText>@user.Name</MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn3">
                                        <MudText Typo="Typo.subtitle2">
                                            @LApp[Availabilty.None.ToString()]
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        }
                    }

                }
                else if (_showWoeps)
                {
                    @L["Woeps the training was not found"]
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            }
        }
    </DialogContent>
    <DialogActions>
        @*<MudButton OnClick="Cancel">Cancel</MudButton>*@
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

