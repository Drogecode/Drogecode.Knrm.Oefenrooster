@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Schedule;
<MudDialog>
    <DialogContent>
        @if (Vehicles?.Count > 0)
        {
            var hasVehicle = false;
            <MudText Typo="Typo.h4">@L["Selected vehicles"]</MudText>
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-1">
                @foreach (var vehicle in Vehicles)
                {
                    var vehicleLink = _linkVehicleTraining?.FirstOrDefault(x => x.Vehicle == vehicle.Id);
                    @if (vehicleLink?.IsSelected == true || (vehicle.Default == true && vehicleLink == null))
                    {
                        hasVehicle = true;
                        <MudItem>
                            <MudText Typo="Typo.body1">
                                @vehicle.Name
                            </MudText>
                        </MudItem>
                    }
                }
                @if (!hasVehicle)
                {
                    <MudItem>
                        <MudText Typo="Typo.body1" Color="Color.Warning">
                            @L["No vehicle selected"]
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
        }
        <MudSwitchM3 Label="Layout options" @bind-Checked="_layoutAB" />
        <MudDivider Class="my-2" />
        @if (_layoutAB)
        {
            <MudExpansionPanels>
                @if (Functions != null && Users != null)
                {
                    @foreach (var function in Functions.OrderBy(x => x.Order))
                    {
                        @if (Users.Any(x => x.UserFunctionId == function.Id) || Planner.PlanUsers.Any(x => x.PlannedFunctionId == function.Id) || function.TrainingOnly)
                        {
                            <MudText>@L["Available {0}", function.Name]</MudText>
                            @foreach (var user in Planner.PlanUsers.Where(x => (x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available || x.Assigned) && x.PlannedFunctionId == function.Id))
                            {
                                /* Available user from this function */
                                <MudSwitch T="bool" CheckedChanged="(e)=> CheckChanged(e, user, function.Id)" Label="@user.Name" Color="GetColor(user.Availabilty)" Tag="user" Checked="user.Assigned" /> <br />
                            }
                            <MudExpansionPanel Text="@L["Other users"]">
                                @foreach (var user in Planner.PlanUsers.Where(x => x.Availabilty != Oefenrooster.Shared.Enums.Availabilty.Available && !x.Assigned && x.PlannedFunctionId == function.Id).OrderBy(o => o.Availabilty))
                                {
                                    /* Not available user from this function */
                                    <MudSwitch T="bool" CheckedChanged="(e)=> CheckChanged(e, user, function.Id)" Label="@user.Name" Color="GetColor(user.Availabilty)" Tag="user" Checked="user.Assigned" /> @LApp[@user.Availabilty.ToString() ?? ""] <br />
                                }
                                @foreach (var user in Users.Where(x => x.UserFunctionId == function.Id))
                                {
                                    /* Users who have not set an availability from this function */
                                    @if (Planner.PlanUsers.Any(x => x.UserId == user.Id)) continue;
                                    <MudSwitch T="bool" CheckedChanged="(e)=> CheckChanged(e, user, function.Id)" Label="@user.Name" Tag="@user" /> <br />
                                }
                                @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.PlannedFunctionId != function.Id).OrderBy(o => o.Availabilty))
                                {
                                    /* Users from a differetn function who have set there availability. */
                                    <MudSwitch T="bool" CheckedChanged="(e)=> CheckChanged(e, user, function.Id)" Label="@user.Name" Color="GetColor(user.Availabilty)" Tag="user" Checked="user.Assigned" />  @LApp[@user.Availabilty.ToString() ?? ""]  @(" - (") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name @(")") <br />
                                }
                                @foreach (var user in Users.Where(x => x.UserFunctionId != function.Id))
                                {
                                    /* Users who have not set an availability from a different function */
                                    @if (Planner.PlanUsers.Any(x => x.UserId == user.Id)) continue;
                                    <MudSwitch T="bool" CheckedChanged="(e)=> CheckChanged(e, user, function.Id)" Label="@user.Name" Color="Color.Dark" Tag="user" /> @("(") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name @(")") <br />
                                }
                            </MudExpansionPanel>
                        }
                    }
                }
            </MudExpansionPanels>
        }
        @if (!_layoutAB && Functions != null && Users != null)
        {
            @if (Planner.PlanUsers.Any(x => x.Assigned))
            {
                <MudText Typo="Typo.h5">
                    @LApp["Assigned"]
                </MudText>
            }
            @foreach (var function in Functions.OrderBy(x => x.Order))
            {
                @foreach (var user in Planner.PlanUsers.Where(x => x.Assigned && x.PlannedFunctionId == function.Id))
                {
                    <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                        <MudItem xs="@_colmn1">
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Filled" OnClick="()=>CheckChanged(false, user,function.Id)" Color="GetColor(user.Availabilty)" Tag="user" />
                        </MudItem>
                        <MudItem xs="@_colmn2">
                            <MudText Typo="Typo.body1">@user.Name</MudText>
                        </MudItem>
                        <MudItem xs="@_colmn3">
                            <MudText Typo="Typo.body2">
                                @LApp[@user.Availabilty.ToString() ?? ""]  @(" - ") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name
                            </MudText>
                        </MudItem>
                        @if (_vehicleInfoForThisTraining != null && _vehicleCount > 0)
                        {
                            <MudItem xs="@_colmn4">
                                @if (_vehicleCount > 1)
                                {
                                    <MudSelect T="DrogeVehicle" Label="@L["vehicle"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                                        @foreach (var vehicle in _vehicleInfoForThisTraining)
                                        {
                                            <MudSelectItem Value="@vehicle">@vehicle.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                                else
                                {
                                    <MudText>
                                        @_vehicleInfoForThisTraining![0].Name
                                    </MudText>
                                }
                            </MudItem>
                        }
                        @if (user.PlannedFunctionId != Guid.Empty && user.UserFunctionId != user.PlannedFunctionId)
                        {
                            <MudItem xs="@_colmn5">
                                <MudText Typo="Typo.body2">
                                    @L["as"] @(" ") @Functions.FirstOrDefault(x=>x.Id == user.PlannedFunctionId)?.Name
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                }
            }
            @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available))
            {
                <MudText Typo="Typo.h5">
                    @LApp["Available"]
                </MudText>
            }
            @foreach (var function in Functions.OrderBy(x => x.Order))
            {
                @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availabilty == Oefenrooster.Shared.Enums.Availabilty.Available && x.PlannedFunctionId == function.Id))
                {
                    <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                        <MudItem xs="@_colmn1">
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Color="GetColor(user.Availabilty)" Tag="user" />
                        </MudItem>
                        <MudItem xs="@_colmn2">
                            <MudText>@user.Name</MudText>
                        </MudItem>
                        <MudItem xs="@_colmn3">
                            <MudText Typo="Typo.subtitle2">
                                @LApp[@user.Availabilty.ToString() ?? ""]  @(" - (") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name @(")")
                            </MudText>
                        </MudItem>
                    </MudGrid>
                }
            }
            @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availabilty != Oefenrooster.Shared.Enums.Availabilty.Available) || Users.Any(x => !Planner.PlanUsers.Any(y => y.UserId == x.Id)))
            {
                <MudText Typo="Typo.h5">
                    @L["Other users"]
                </MudText>
            }
            @foreach (var function in Functions.OrderBy(x => x.Order))
            {
                @if (Users.Any(x => x.UserFunctionId == function.Id) || Planner.PlanUsers.Any(x => x.PlannedFunctionId == function.Id))
                {
                    @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availabilty != Oefenrooster.Shared.Enums.Availabilty.Available && x.PlannedFunctionId == function.Id).OrderBy(o => o.Availabilty))
                    {
                        <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                            <MudItem xs="@_colmn1">
                                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Color="GetColor(user.Availabilty)" Tag="user" />
                            </MudItem>
                            <MudItem xs="@_colmn2">
                                <MudText>@user.Name</MudText>
                            </MudItem>
                            <MudItem xs="@_colmn3">
                                <MudText Typo="Typo.subtitle2">
                                    @LApp[@user.Availabilty.ToString() ?? ""]  @(" - (") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name @(")")
                                </MudText>
                            </MudItem>
                        </MudGrid>

                    }
                    @foreach (var user in Users.Where(x => x.UserFunctionId == function.Id))
                    {
                        @if (Planner.PlanUsers.Any(x => x.UserId == user.Id)) continue;
                        <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                            <MudItem xs="@_colmn1">
                                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="()=>CheckChanged(true, user,function.Id)" Tag="user" />
                            </MudItem>
                            <MudItem xs="@_colmn2">
                                <MudText>@user.Name</MudText>
                            </MudItem>
                            <MudItem xs="@_colmn3">
                                <MudText Typo="Typo.subtitle2">
                                    @LApp[Availabilty.None.ToString()]  @(" - (") @Functions.FirstOrDefault(x=>x.Id == user.UserFunctionId)?.Name @(")")
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    }
                }
            }
        }
    </DialogContent>
    <DialogActions>
        @*<MudButton OnClick="Cancel">Cancel</MudButton>*@
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

