@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
<MudDialog>
    <TitleContent>
        @if (_showPadlock)
        {
            if (_canEdit)
            {
                <MudIcon Icon="@Icons.Material.Outlined.LockOpen" Class="mr-3 mb-n1"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.Lock" Class="mr-3 mb-n1"/>
            }
        }
    </TitleContent>
    <DialogContent>
        @if (Vehicles?.Count > 0)
        {
            var hasVehicle = false;
            <MudText Typo="Typo.h4">@L["Selected vehicles"]</MudText>
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-1">
                @for (var i = 0; i < _vehicleInfoForThisTraining.Count; i++)
                {
                    var innerI = i;
                    hasVehicle = true;
                    <MudItem >
                        <MudText Typo="_vehicleInfoForThisTraining[innerI].IsActive ? Typo.body1 : Typo.subtitle1" Class='@(_vehicleInfoForThisTraining[innerI].IsActive ? "d-flex" :  "opacity-75 text-base d-flex")'>
                            @_vehicleInfoForThisTraining[innerI].Name
                            @if (innerI + 1 < _vehicleInfoForThisTraining.Count)
                            {
                                <p>, </p>
                            }
                        </MudText>
                    </MudItem>
                }
                @if (!hasVehicle && !_isLoading)
                {
                    <MudItem>
                        <MudText Typo="Typo.body1" Color="Color.Warning">
                            @L["No vehicle selected"]
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
        }
        @if (Functions != null && Users != null)
        {
            @if (Planner.PlanUsers.Any(x => x.Assigned))
            {
                <MudText Typo="Typo.h5">
                    @LApp["Assigned"]
                </MudText>
            }

            <div class="grid grid-cols-1 max-md:divide-y">
                @foreach (var function in Functions.OrderBy(x => x.Order))
                {
                    @foreach (var user in Planner.PlanUsers.Where(x => x.Assigned && x.PlannedFunctionId == function.Id).OrderBy(x => x.Name))
                    {
                        <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="py-2">
                            <MudItem Class="max-md:order-2 md:order-1" xs="12" sm="@(_colmn1 * 2)" md="@_colmn1">
                                @if (_authEditOtherUser || user.UserId.Equals(_currentUserId))
                                {
                                    <MudButtonGroup Variant="Variant.Text">
                                        <MudButton Disabled="@(!_canEdit)" StartIcon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Filled"
                                                   OnClick="@(() => CheckChanged(false, user, function.Id))" IconColor="GetColor(user.Availability)" Tag="user"/>
                                        <MudButton Disabled="@(!_canEdit)" StartIcon="@Icons.Material.Filled.HowToReg" Variant="Variant.Filled" OnClick="() => ClickLeader(user)"
                                                   IconColor="user.PlannedFunctionId.Equals(DefaultSettingsHelper.KompasLeiderId) ? Color.Info : Color.Inherit" Tag="user"/>
                                    </MudButtonGroup>
                                }
                            </MudItem>
                            <MudItem Class="max-md:order-1 md:order-3" xs="12" sm="@(_colmn2 * 2)" md="@_colmn2">
                                <MudText Typo="Typo.body1">@user.Name</MudText>
                            </MudItem>
                            <MudItem Class="order-5" xs="12" sm="@(_colmn3 * 2)" md="@_colmn3">
                                <MudText Typo="Typo.body1" @onclick="() => { if (!_canEdit) return; user.ClickedFunction = !user.ClickedFunction; }">
                                    @Functions.FirstOrDefault(x => x.Id == user.UserFunctionId)?.Name
                                </MudText>
                                @if (user.ClickedFunction)
                                {
                                    <MudSelect Disabled="@(!_canEdit)" T="Guid?" Label="@LApp["function"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@user.PlannedFunctionId"
                                               ValueChanged="(e) => FunctionSelectionChanged(user, e)">
                                        @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                                        {
                                            <MudSelectItem T="Guid?" Value="@function.Id">@function.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                }
                            </MudItem>
                            @if (_vehicleInfoForThisTraining != null && _vehicleCount > 0)
                            {
                                <MudItem Class="order-6" xs="12" sm="@(_colmn4 * 2)" md="@_colmn4">
                                    @if (_vehicleCount > 1)
                                    {
                                        @if (user.VehicleId == null && _vehicleInfoForThisTraining.Any(x => x.IsDefault))
                                        {
                                            user.VehicleId = _vehicleInfoForThisTraining.FirstOrDefault(x => x.IsDefault)!.Id;
                                        }

                                        <MudSelect Disabled="@(!_canEdit)" T="Guid?" Label="@L["vehicle"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Value="@user.VehicleId"
                                                   ValueChanged="(e) => VehicleSelectionChanged(user, e)">
                                            @foreach (var vehicle in _vehicleInfoForThisTraining)
                                            {
                                                if (vehicle.IsActive)
                                                {
                                                    <MudSelectItem T="Guid?" Value="@vehicle.Id">@vehicle.Name</MudSelectItem>
                                                }
                                                else if (vehicle.Id.Equals(user.VehicleId))
                                                {
                                                    <MudSelectItem T="Guid?" Value="@vehicle.Id" Disabled>@vehicle.Name</MudSelectItem>
                                                }
                                            }
                                        </MudSelect>
                                    }
                                    else
                                    {
                                        <MudText>
                                            @_vehicleInfoForThisTraining![0].Name
                                        </MudText>
                                    }
                                </MudItem>
                            }
                            @if (user.PlannedFunctionId != Guid.Empty && user.UserFunctionId != user.PlannedFunctionId)
                            {
                                <MudItem Class="max-md:order-3 md:order-7" xs="12" sm="@(_colmn5 * 2)" md="@_colmn5">
                                    <MudText Typo="Typo.body1">
                                        @($"{LApp["As"]} {Functions.FirstOrDefault(x => x.Id == user.PlannedFunctionId)?.Name}")
                                    </MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                }
            </div>

            @if (_canEdit)
            {
                @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availability == Oefenrooster.Shared.Enums.Availability.Available))
                {
                    <MudText Typo="Typo.h5">
                        @LApp["Available"]
                    </MudText>
                }

                @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                {
                    @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availability == Oefenrooster.Shared.Enums.Availability.Available && x.UserFunctionId == function.Id))
                    {
                        <MudText Typo="Typo.h6">
                            @function.Name
                        </MudText>
                        @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availability == Oefenrooster.Shared.Enums.Availability.Available && x.UserFunctionId == function.Id).OrderBy(x => x.Name))
                        {
                            <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                <MudItem xs="@_colmn1">
                                    @if (_authEditOtherUser || user.UserId.Equals(_currentUserId))
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="@(() => CheckChanged(true, user, function.Id))"
                                                       Color="GetColor(user.Availability)" Tag="user"/>
                                    }
                                </MudItem>
                                <MudItem xs="@_colmn2">
                                    <MudText>@user.Name</MudText>
                                </MudItem>
                                <MudItem xs="@_colmn3">
                                    <MudText Typo="Typo.subtitle2">
                                        @LApp[(user.Availability ?? Availability.None).ToString()]
                                    </MudText>
                                </MudItem>
                                <MudItem xs="@_colmn4">
                                    <MudText>@user.Buddy</MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                }

                @if (Planner.PlanUsers.Any(x => !x.Assigned && x.Availability != Availability.Available) || Users.Any(x => !Planner.PlanUsers.Any(y => y.UserId == x.Id)))
                {
                    <MudText Typo="Typo.h5">
                        @L["Other users"]
                    </MudText>
                }

                @if (_plannerIsUpdated)
                {
                    @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                    {
                        @if (Users.Any(x => x.UserFunctionId == function.Id) || Planner.PlanUsers.Any(x => !x.Assigned && x.Availability != Availability.Available && x.UserFunctionId == function.Id))
                        {
                            <MudText Typo="Typo.h6">
                                @function.Name
                            </MudText>
                            @foreach (var user in Planner.PlanUsers.Where(x => !x.Assigned && x.Availability != Availability.Available && x.UserFunctionId == function.Id).OrderBy(o => o.Availability).OrderBy(x => x.Name))
                            {
                                <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                    <MudItem xs="@_colmn1">
                                        @if (_authEditOtherUser || user.UserId.Equals(_currentUserId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="@(() => CheckChanged(true, user, function.Id))"
                                                           Color="GetColor(user.Availability)" Tag="user"/>
                                        }
                                    </MudItem>
                                    <MudItem xs="@_colmn2">
                                        <MudText>@user.Name</MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn3">
                                        <MudText Typo="Typo.subtitle2">
                                            @LApp[(user.Availability ?? Availability.None).ToString()]
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn4">
                                        <MudText>@user.Buddy</MudText>
                                    </MudItem>
                                </MudGrid>
                            }

                            @foreach (var user in Users.Where(x => x.UserFunctionId == function.Id).OrderBy(x => x.Name))
                            {
                                @if (Planner.PlanUsers.Any(x => x.UserId == user.Id)) continue;
                                <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="pa-1">
                                    <MudItem xs="@_colmn1">
                                        @if (_authEditOtherUser || user.Id.Equals(_currentUserId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Variant="Variant.Filled" OnClick="@(() => CheckChanged(true, user, function.Id))" Tag="user"/>
                                        }
                                    </MudItem>
                                    <MudItem xs="@_colmn2">
                                        <MudText>@user.Name</MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn3">
                                        <MudText Typo="Typo.subtitle2">
                                            @LApp[Availability.None.ToString()]
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="@_colmn4">
                                        <MudText>@user.Buddy</MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        }
                    }
                }
                else if (_showWoeps)
                {
                    @L["Woeps the training was not found"]
                }
                else
                {
                    <DrogeLoading />
                }
            }
        }
    </DialogContent>
    <DialogActions>
        @*<MudButton OnClick="Cancel">Cancel</MudButton>*@
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>