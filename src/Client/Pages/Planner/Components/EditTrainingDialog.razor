@using Drogecode.Knrm.Oefenrooster.Shared.Models.TrainingTarget
@using MudExRichTextEditor.Types
@using MudExRichTextEditor

<MudDialog>
    <TitleContent>
        @if (_showPadlock)
        {
            if (_canEdit)
            {
                <MudIcon Icon="@Icons.Material.Outlined.LockOpen" Class="mr-3 mb-n1"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.Lock" Class="mr-3 mb-n1"/>
            }
        }
        @if (IS_DEBUG && _training?.IsNew == true)
        {
            <MudIcon Icon="@Icons.Material.Outlined.FiberNew" Class="mr-3 mb-n1"/>
        }
        @if (IS_DEBUG && _training?.IsNewFromDefault == true)
        {
            <MudIcon Icon="@Icons.Material.Outlined.NewLabel" Class="mr-3 mb-n1"/>
        }
    </TitleContent>
    <DialogContent>
        @if (_training == null || TrainingTypes == null)
        {
            <DrogeLoading/>
        }
        else
        {
            <AuthorizeView Roles=@($"{AccessesNames.AUTH_scheduler_target_set},{AccessesNames.AUTH_scheduler_description_edit}")>
                <Authorized>
                    <MudTabs Rounded="true">
                        <MudTabPanel Text="@L["Basic"]">
                            @MainTab
                        </MudTabPanel>
                        <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_description_edit" Context="inner">
                            <MudTabPanel Text="@L["Description"]">
                                @DescriptionTab
                            </MudTabPanel>
                        </AuthorizeView>
                        <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_target_set" Context="inner">
                            <MudTabPanel Text="@L["Targets"]">
                                @TargetEditTab
                            </MudTabPanel>
                        </AuthorizeView>
                    </MudTabs>
                </Authorized>
                <NotAuthorized>
                    @MainTab
                </NotAuthorized>
            </AuthorizeView>
        }
    </DialogContent>
    <DialogActions>
        <div class="flex flex-wrap">
            <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_delete">
                @if (_training?.IsNew is not true)
                {
                    if (_showDelete)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                            @L["Are you sure This can not be reverted"]<MudButton Color="Color.Warning" OnClick="Delete" Disabled="_saving">@LApp["Delete"]</MudButton>
                        </MudAlert>
                    }

                    <MudButton Color="Color.Warning" OnClick="() => _showDelete = !_showDelete" Disabled="@(!_canEdit || _saving)">@LApp["Delete"]</MudButton>
                }
            </AuthorizeView>
            <MudButton OnClick="Cancel" Disabled="_saving">@LApp["Cancel"]</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnSubmit" Disabled="@(!_canEdit || _saving || _descriptionToLong)">@LApp["save"]</MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code{

    private RenderFragment MainTab =>
        @<div Elevation="0" class="m-3">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors" Disabled="@(!_canEdit || _saving)">
                <MudTextField Label="@L["Name"]" @bind-Value="@_training.Name" Counter="@DefaultSettingsHelper.MAX_LENGTH_TRAINING_TITLE"
                              MaxLength="@DefaultSettingsHelper.MAX_LENGTH_TRAINING_TITLE"
                              Immediate="true" data-testid="training-name"/>

                <MudDatePicker Label="@L["Date"]" @bind-Date="_training.Date" Validation="@(new Func<DateTime?, string?>(DateValidation))" Required Disabled="!_training.IsNew"/>

                @if (!_training.ShowTime || _startedWithShowNoTime)
                {
                    <MudSwitch Label="@L["Set time"]" @bind-Value="_training.ShowTime"/>
                }
                @if (_training.ShowTime)
                {
                    <MudTimePicker Label="@L["From"]" @bind-Time="_training.TimeStart" Validation="@(new Func<TimeSpan?, string?>(StartBeforeEndValidation))" Required/>
                    <MudTimePicker Label="@LApp["till"]" @bind-Time="_training.TimeEnd" Validation="@(new Func<TimeSpan?, string?>(EndAfterStartValidation))" Required/>
                }
                @if (_currentTrainingType?.IsActive == false)
                {
                    <MudTextField Label="@L["Training type"]" Disabled="true" Value="_currentTrainingType.Name"/>
                }
                else
                {
                    <MudSelect T="Guid?" Label="@L["Training type"]" Value="_training.RoosterTrainingTypeId" ValueChanged="RoosterTrainingTypeChanged" Required>
                        @foreach (var trainingType in TrainingTypes.Where(x => x.IsActive).OrderBy(x => x.Order))
                        {
                            <MudSelectItem T="Guid?" Value="@trainingType.Id">@trainingType.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
                <MudSwitchM3 T="bool" Label="@L["Count to training target"]" @bind-Value="_training.CountToTrainingTarget"/>
                <MudDivider/>
                <MudSwitchM3 T="bool" Label="@L["Pin to dashboard"]" @bind-Value="_training.IsPermanentPinned"/>
                <MudDivider/>
                <MudSwitchM3 T="bool" Label="@L["Ask all users to fill in on the dashboard"]" @bind-Value="_training.IsPinned"/>
                @if (Vehicles != null)
                {
                    <MudText Typo="Typo.h4">@L["Which vehicle?"]</MudText>
                    @if (_linkVehicleTraining != null)
                    {
                        foreach (var vehicle in Vehicles.Where(x => x.IsActive))
                        {
                            bool? isSelected = _linkVehicleTraining?.FirstOrDefault(x => x.VehicleId == vehicle.Id)?.IsSelected;
                            <MudSwitch T="bool" ValueChanged="(e) => CheckChanged(e, vehicle)" Color="Color.Success" Label="@vehicle.Name" Tag="@vehicle"
                                       Value="@(isSelected == true || (isSelected == null && vehicle.IsDefault))"/>
                            <br/>
                        }
                    }
                }
            </MudForm>
        </div>;

    private RenderFragment DescriptionTab =>
        @<div Elevation="0" class="m-3">
            <MudExRichTextEdit @ref="@_editor"
                               ReadOnly="false"
                               Height="444"
                               Class="m-2"
                               Placeholder="@L["Description"]"
                               ValueHtmlBehavior="GetHtmlBehavior.InnerHtml"
                               @bind-Value="@_training.Description">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                        </span>
                    <span class="ql-formats">
                                            <select class="ql-color"></select>
                                            <select class="ql-background"></select>
                                        </span>
                    <span class="ql-formats">
                                            <button class="ql-list" value="ordered"></button>
                                            <button class="ql-list" value="bullet"></button>
                                        </span>
                    <span class="ql-formats">
                                            <button class="ql-link"></button>
                                        </span>
                </ToolbarContent>
            </MudExRichTextEdit>
            @if (_descriptionToLong)
            {
                <MudAlert
                    Severity="Severity.Warning">@L["Description to long {0}/{1}", _training.Description?.Length ?? -1, DefaultSettingsHelper.MAX_LENGTH_TRAINING_DESCRIPTION]</MudAlert>
            }
        </div>;

    private RenderFragment TargetEditTab =>
        @<div Elevation="0" class="m-3">
            @if (_trainingSubjects is not null)
            {
                <MudList T="Guid" @bind-SelectedValues="_selectedValuesTargets" SelectionMode="SelectionMode.MultiSelection">
                    <MudListSubheader>
                        @L["Select training targets"]
                    </MudListSubheader>
                    @foreach (var subject in _trainingSubjects)
                    {
                        @SubjectsList(subject)
                    }
                </MudList>
            }
        </div>;

    private RenderFragment<TrainingSubject> SubjectsList => subject =>
        @<div>
            <MudListItem T="Guid" Text="@subject.Name" Expanded>
                <NestedList>
                    @if (subject.TrainingSubjects is not null)
                    {
                        foreach (var childSubject in subject.TrainingSubjects)
                        {
                            @SubjectsList(childSubject)
                        }
                    }
                    @if (subject.TrainingTargets is not null)
                    {
                        foreach (var target in subject.TrainingTargets)
                        {
                            <MudListItem T="Guid" Value="@target.Id" Text="@target.Name" />
                        }
                    }
                </NestedList>
            </MudListItem>
        </div>;
}