@using Drogecode.Knrm.Oefenrooster.Client.Models.CalendarItems;
@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
@if (_monthItems != null)
{
    @foreach (var item in _monthItems.OrderBy(x => x.Order))
    {
        <MudAlert Severity="@item.Severity" Variant="Variant.Filled">@item.Text</MudAlert>
    }
}
<div class="d-none d-md-flex">
    <MudCalendar Items="_events" MonthCellMinHeight="100" DateRangeChanged="SetCalenderForMonth" Outlined ButtonVariant="Variant.Text" ShowDay=false ShowWeek=false>
         <CellTemplate>
             @if (context is ScheduleCalendarItem)
            {
                var training = ((ScheduleCalendarItem)context).Training;
                @if (training != null)
                {
                    <ScheduleCard Planner="training" Users="Users" Functions="Functions" Vehicles="Vehicles" TrainingTypes="TrainingTypes" ShowPastBody="!_currentMonth" />
                }
            }
            else if (context is RoosterItemDayCalendarItem)
            {
                var dayItem = ((RoosterItemDayCalendarItem)context).ItemDay;
                @if (dayItem is not null && (dayItem.Type == CalendarItemType.SpecialDate || _user?.Id.Equals(DefaultSettingsHelper.IdTaco) is true))
                {
                    Color color = Color.Secondary;
                    switch (dayItem.Type)
                    {
                        case CalendarItemType.Custom:
                            color = Color.Primary;
                            break;
                        case CalendarItemType.SpecialDate:
                            color = Color.Info;
                            break;
                    }
                    <div class="d-flex gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="color" Size="Size.Small" />
                        <span>@dayItem.Text</span>
                    </div>
                }
            }
        </CellTemplate>
    </MudCalendar>
</div>
<div class="d-md-none">
    <MonthSelector Month="_month" MonthChanged="SetMonth" />
    <MudPaper Elevation="0" Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 mx-2 my-4">
        @if (_events == null || _month == null)
        {
            <MudSkeleton />
            <MudSkeleton />
            <MudSkeleton />
            <MudSkeleton />
        }
        else
        {
            @foreach (var ev in _events.Where(x => x.Start.Month == _month.Value.Month && x.Start.Year == _month.Value.Year && x.End >= DateTime.Now).OrderBy(x => x.Start))
            {
                <div class="flex-1">
                    @if (ev is ScheduleCalendarItem)
                    {
                        var training = ((ScheduleCalendarItem)ev).Training;
                        @if (training is not null)
                        {
                            <ScheduleCard MinWidth="300px" MaxWidth="600px" Planner="training" Users="Users" Functions="Functions" Vehicles="Vehicles" TrainingTypes="TrainingTypes" ShowDate="true" ShowDayOfWeek="true" ShowPastBody="!_currentMonth" />
                        }
                    }
                    else if (ev is RoosterItemDayCalendarItem)
                    {
                        var dayItem = ((RoosterItemDayCalendarItem)ev).ItemDay;
                        @if (dayItem is not null)
                        {
                            <div class="flex gap-1" style="min-width:300px;max-width:600px;">
                                <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Secondary" Size="Size.Small" />
                                <div>@dayItem.Text - @dayItem.DateStart!.Value.ToString("dddd dd MMM")</div>
                            </div>
                        }
                    }
                </div>
            }
        }
    </MudPaper>
</div>
<AuthorizeView Roles="@AccessesNames.AUTH_users_counter" Context="inner">
    <ScheduleCounter Users="Users" Functions="Functions" UserTrainingCounter="_userTrainingCounter" />
</AuthorizeView>
