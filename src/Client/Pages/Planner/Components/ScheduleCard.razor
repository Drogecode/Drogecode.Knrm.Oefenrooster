@if (!_isDeleted)
{
    @if (Functions is not null && Vehicles is not null && Planner.PlanUsers.Any(x => x.Assigned))
    {
        <CalendarBaseCard ReplaceEmptyName="@ReplaceEmptyName" Width="@Width" MaxWidth="@MaxWidth" MinWidth="@MinWidth" Training="@Planner" OnClickCallback="@OpenScheduleDialog"
                          OnClickSettings="@OpenConfigDialog" OnClickHistory="_showHistory ? OpenHistoryDialog : null!" OnClickRate="_showRate ? OpenRateDialog : null!"
                          ShowDate="@ShowDate" ShowDayOfWeek="@ShowDayOfWeek" @bind-ShowPastBody="@_showPastBody" MoreMessage="@L["Show attendees"]" Refresh="_refreshModel">
            <ChipContent>
                <ReadMoreChip Training="Planner"/>
                <ReadReportChip Training="Planner"/>
            </ChipContent>
            <ChildContent>
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
                <MudList T="string" ReadOnly="true">
                    @{ var userCount = 0; }
                    @foreach (var vehicle in Vehicles.Where(x => Planner.PlanUsers.Any(y => y.VehicleId == x.Id) || (x.IsDefault && Planner.PlanUsers.Any(y => y.VehicleId == null))))
                    {
                        @if (Functions.Any(f => f.Active) && Planner.PlanUsers.Any(x => x.Assigned && (x.VehicleId == vehicle.Id || (vehicle.IsDefault && x.VehicleId == null))))
                        {
                            <div class="my-6">
                                <MudText Typo="Typo.subtitle2">@vehicle.Name</MudText>
                                @foreach (var function in Functions.Where(x => x.Active).OrderBy(x => x.Order))
                                {
                                    var users = Planner.PlanUsers.Where(x => x.Assigned && x.PlannedFunctionId == function.Id && (x.VehicleId == vehicle.Id || (vehicle.IsDefault && x.VehicleId == null))).OrderBy(x => x.Name).ToList();
                                    foreach (var assignedUser in users.Take(_showUsers))
                                    {
                                        if (userCount >= _showUsers)
                                        {
                                            userCount++;
                                            break;
                                        }
                                        userCount++;
                                        <MudListItem T="string" Disabled="!assignedUser.UserId.Equals(_userId)"
                                                     OnClick="@OpenScheduleDialog">@assignedUser.Name@(assignedUser.PlannedFunctionId != assignedUser.UserFunctionId ? $" - {LApp["As"]} {function.Name}" : "")</MudListItem>
                                    }
                                }
                            </div>
                        }
                    }
                    @if (userCount > _showUsers)
                    {
                        <MudButton OnClick="@ShowAllParticipants">@L["Show all attendees"]</MudButton>       
                    }
                </MudList>
            </ChildContent>
        </CalendarBaseCard>
    }
    else
    {
        <CalendarBaseCard ReplaceEmptyName="@ReplaceEmptyName" Width="@Width" MaxWidth="@MaxWidth" MinWidth="@MinWidth" Training="@Planner" OnClickCallback="@OpenScheduleDialog"
                          OnClickSettings="@OpenConfigDialog" OnClickHistory="_showHistory ? OpenHistoryDialog : null!" ShowDate="@ShowDate" ShowDayOfWeek="@ShowDayOfWeek"
                          @bind-ShowPastBody="@_showPastBody" MoreMessage="@L["Show attendees"]" Refresh="_refreshModel">
            <ChipContent>
                <ReadMoreChip Training="Planner"/>
            </ChipContent>
        </CalendarBaseCard>
    }
}