@page "/planner/schedule"
@attribute [Authorize]
@using Drogecode.Knrm.Oefenrooster.Client.Pages.Planner.Components
@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Schedule;

<MudButton Variant="Variant.Filled" Class="ml-2" OnClick="async ()=>{await AddWeekToSchadules(false);}">@L["Add week"]</MudButton>
<br />
@foreach (var plannesInWeek in _scheduleForUser)
{
    @if (_month != plannesInWeek.First().Date.Month)
    {
        _month = plannesInWeek.First().Date.Month;
        <MudText Typo="Typo.h3" Class="ml-2 mt-12">@plannesInWeek.First().Date.ToString(plannesInWeek.First().Date.Year == DateTime.Today.Year ? "MMMM" : "MMMM yyyy")</MudText>
    }
    <MudPaper Elevation="0" Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 mx-2 my-4">
        @foreach (var training in plannesInWeek)
        {
            <ScheduleBlock Planner="training" />
        }
    </MudPaper>
}
<br />
<MudButton Variant="Variant.Filled" Class="ml-2" OnClick="async ()=>{await AddWeekToSchadules(true);}">@L["Add week"]</MudButton>

@code {
    [Inject] private IStringLocalizer<Schedule> L { get; set; } = default!;
    [Inject] private ScheduleRepository _scheduleRepository { get; set; } = default!;
    [Parameter] public Guid CustomerId { get; set; } = Guid.Empty;
    private LinkedList<List<Planner>> _scheduleForUser = new();
    private int? _month;
    private int _high = -1;
    private int _low = -2;

    protected override async Task OnInitializedAsync()
    {
        for (int i = -1; i < 6; i++)
        {
            await AddWeekToSchadules(true);
        }
    }

    private async Task AddWeekToSchadules(bool high)
    {
        List<Planner> ScheduleForUser = new();
        var PlannersInWeek = (await _scheduleRepository.ScheduleForAll(high ? _high : _low))?.Planners;
        if (PlannersInWeek != null)
            foreach (var Plan in PlannersInWeek)
                ScheduleForUser.Add(Plan);
        if (high)
        {
            _scheduleForUser.AddLast(ScheduleForUser);
            _high++;
        }
        else
        {
            _scheduleForUser.AddFirst(ScheduleForUser);
            _low--;
        }
        StateHasChanged();
    }
}