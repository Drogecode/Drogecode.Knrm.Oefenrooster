@page "/planner/user/{Id:guid}"
@using Drogecode.Knrm.Oefenrooster.Client.Pages.Dashboard.Components
@using Drogecode.Knrm.Oefenrooster.Shared.Enums
@using Drogecode.Knrm.Oefenrooster.Shared.Models.TrainingTarget
@using Drogecode.Knrm.Oefenrooster.Shared.Providers

@if (_user is not null && _functions is not null)
{
    <MudText Typo="Typo.h3">@L["Trainings for {0}", _user?.Name ?? "No name"]</MudText>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="@L["Trainings"]">
            @if (_trainings is not null)
            {
                <MudPaper Elevation="0" Class="flex align-content-start flex-wrap grow-1 gap-4 mx-2 my-4">
                    @foreach (var training in _trainings.Trainings.OrderByDescending(x => x.DateStart))
                    {
                        <div class="flex-1">
                            <IndexCard MinWidth="300px" MaxWidth="600px" User="_user" Training="training" Functions="_functions" Users="_users" TrainingTypes="_trainingTypes" Vehicles="_vehicles"/>
                        </div>
                    }
                </MudPaper>
                @if (_trainings.TotalCount >= _total)
                {
                    <MudButton OnClick="@LoadMore" Color="Color.Primary" Disabled="_loadingTrainings">@LApp["Load more"]</MudButton>
                }
            }
            else
            {
                <DrogeLoading/>
            }
        </MudTabPanel>
        <MudTabPanel Text="@L["For target"]">
            @if (_userFunction is not null && _userMonthInfo is not null)
            {
                <MudText Typo="Typo.body1">@L["Target: {0}", _userFunction.TrainingTarget]</MudText>
                <MudPaper>
                    <MudGrid Spacing="2" Justify="Justify.FlexStart">
                        @foreach (var userMonthInfo in _userMonthInfo.UserMonthInfo.OrderByDescending(x => x.Year).ThenByDescending(x => x.Month))
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudText Style=@(userMonthInfo.Valid < _userFunction.TrainingTarget ? "color: var(--mud-palette-error)" : "")>
                                    @($"{new DateTime(userMonthInfo.Year, userMonthInfo.Month, 1).ToString(DateTime.Now.Year == userMonthInfo.Year ? "MMMM" : "yyyy MMMM")} - {L["For target"]}: {userMonthInfo.Valid} {L["Total"]}: {userMonthInfo.All}")
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </MudPaper>
            }
            else
            {
                <DrogeLoading/>
            }
        </MudTabPanel>
        <AuthorizeView Roles="@AccessesNames.AUTH_target_user_read">
            <MudTabPanel Text="@L["Rating"]">
                <MudSelect T="RatingPeriod" Value="_ratingPeriod" ValueChanged="RatingPeriodChanged" Label="@L["Rating period"]" disabled="@_loadingRating">
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.SelectValue" Disabled>@L[nameof(RatingPeriod.SelectValue)]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.OneMonth">@L[nameof(RatingPeriod.OneMonth)]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.PastYear">@L[$"{nameof(RatingPeriod.PastYear)} " + "({0})", DateTime.Today.Year - 1]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.CurrentYear">@L[$"{nameof(RatingPeriod.CurrentYear)} " + "({0})", DateTime.Today.Year]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.OneYear">@L[nameof(RatingPeriod.OneYear)]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.ThreeYear">@L[nameof(RatingPeriod.ThreeYear)]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.FiveYear">@L[nameof(RatingPeriod.FiveYear)]</MudSelectItem>
                    <MudSelectItem T="RatingPeriod" Value="RatingPeriod.All">@L[nameof(RatingPeriod.All)]</MudSelectItem>
                </MudSelect>
                @if (_loadingRating)
                {
                    <DrogeLoading/>
                }
                else if (_userResultForTargets is not null && _userResultForTargets.Count > 0)
                {
                    <TrainingSubjectList>
                        <BodyContent Context="trainingTarget">
                            @{
                                var userResultForTarget = _userResultForTargets.Where(x => x.TrainingTargetId == trainingTarget.Id).FirstOrDefault();
                                var color = Color.Primary;
                                if (trainingTarget.Type == TrainingTargetType.Knowledge)
                                {
                                    color = Color.Secondary;
                                }
                            }
                            @switch (trainingTarget.Group)
                            {
                                case TrainingTargetGroup.Single:
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Color="@color" /> 
                                    break;
                                    case TrainingTargetGroup.TwoPersons:
                                    <MudIcon Icon="@Icons.Material.Filled.People" Color="@color" />
                                    break;
                                case TrainingTargetGroup.Group:
                                    <MudIcon Icon="@Icons.Material.Filled.Group" Color="@color" /> 
                                    break;
                            }
                            <MudText>@trainingTarget.Name</MudText>
                            @if (userResultForTarget?.Count > 0)
                            {
                                <MudText> - count @userResultForTarget?.Count -</MudText>
                                @switch (trainingTarget.Type)
                                {
                                    case TrainingTargetType.Exercise:
                                        <MudRating Size="@Size.Small" SelectedValue="@(Convert.ToInt32(userResultForTarget!.Result))" ReadOnly/>
                                        <MudText> - @Math.Round(userResultForTarget.Result, 2)</MudText>
                                        break;
                                    case TrainingTargetType.Knowledge:
                                        <MudCheckBox T="bool" Value="@(userResultForTarget.Result > 0.3)" ReadOnly="@true"/>
                                        break;
                                    default:
                                        @L["Type {0} not implemented", trainingTarget.Type]
                                        break;
                                }
                            }
                            @if (!string.IsNullOrEmpty(trainingTarget.Url))
                            {
                                <MudLink Href="@trainingTarget.Url" Target="_blank">@trainingTarget.UrlDescription</MudLink>
                            }
                        </BodyContent>
                    </TrainingSubjectList>
                }
                else
                {
                    <MudText Typo="Typo.body1">@L["No rating available for selected period"]</MudText>   
                }

            </MudTabPanel>
        </AuthorizeView>
        <AuthorizeView Roles="@AccessesNames.AUTH_users_settings">
            <MudTabPanel Text="@L["Settings"]">
                <MudPaper Class="pa-4" MaxWidth="500px">

                    <AuthorizeView Roles="@AccessesNames.AUTH_users_add_role" Context="inner">
                        @if (_userRoles?.Roles is not null && _userLinkRoles?.Roles is not null)
                        {
                            <MudSelectExtended T="Guid?" Label="@L["Roles"]" MultiSelection="true" SelectedValues="_userRolesForUser" SelectedValuesChanged="UserRolesChanged"
                                               MultiSelectionTextFunc="@(new Func<List<Guid?>, string>(GetSelectedRolesText))" AnchorOrigin="Origin.BottomCenter"
                                               Disabled="_updatingRoles">
                                @foreach (var role in _userRoles.Roles.OrderBy(x => x.Name))
                                {
                                    <MudSelectItemExtended T="Guid?" Value="@role.Id" Disabled="_userLinkRoles.Roles.Any(x=>x.Id == role.Id && x.SetExternal)">@role.Name</MudSelectItemExtended>
                                }
                            </MudSelectExtended>
                        }
                    </AuthorizeView>
                    <MudSelect T="Guid?" Label="@L["Function"]" Value="_user.UserFunctionId" ValueChanged="UserFunctionChanged" Disabled="@_user.RoleFromSharePoint"
                               AnchorOrigin="Origin.BottomLeft">
                        @foreach (var function in _functions.Where(x => !x.TrainingOnly).OrderBy(x => x.Order))
                        {
                            <MudSelectItem T="Guid?" Value="@function.Id">@function.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <SelectMultipleUsers Users="_users" Functions="_functions" Label="@L["Buddy"]" Selection="_selectedUsersAction" SelectionChanged="OnSelectionChanged" MultiSelection="false"
                                         ReadOnly="_updatingSelection"/>
                    <MudNumericField T="int?" Value="_user.Nr" Label="@L["User number"]" ValueChanged="UserNumberChanged"/>
                </MudPaper>
            </MudTabPanel>
        </AuthorizeView>
    </MudTabs>
}
else
{
    <DrogeLoading/>
}
