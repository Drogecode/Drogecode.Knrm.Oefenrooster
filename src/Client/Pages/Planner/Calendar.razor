@page "/planner/calendar"
@using Drogecode.Knrm.Oefenrooster.Client.Pages.Planner.Components
@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Schedule;
<h3>Calendar</h3>

<MudButton Variant="Variant.Filled" Class="ml-2" OnClick="async ()=>{await AddWeekToSchadules(false);}">@L["Add week"]</MudButton>
<br />
@foreach (var trainingWeek in _scheduleForUser)
{
    @if (_month != trainingWeek.First().Date.Month)
    {
        _month = trainingWeek.First().Date.Month;
        <MudText Typo="Typo.h3">@trainingWeek.First().Date.ToString("MMMM")</MudText>
    }
    <MudPaper Elevation="0" Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 mx-2 my-4">
        @foreach (var training in trainingWeek)
        {
            <Trainingblock Training="training" />
        }
    </MudPaper>
}
<br />
<MudButton Variant="Variant.Filled" Class="ml-2" OnClick="async ()=>{await AddWeekToSchadules(true);}">@L["Add week"]</MudButton>

@code {
    [Inject] private IStringLocalizer<Calendar> L { get; set; } = default!;
    [Inject] private ScheduleRepository _scheduleRepository { get; set; } = default!;
    [Parameter] public Guid CustomerId { get; set; } = Guid.Empty;
    private LinkedList<List<Training>> _scheduleForUser = new();
    private int? _month;
    private int _high = -1;
    private int _low = -2;

    protected override async Task OnInitializedAsync()
    {
        for (int i = -1; i < 6; i++)
        {
            await AddWeekToSchadules(true);
        }
    }

    private async Task AddWeekToSchadules(bool high)
    {
        List<Training> scheduleForUser = new();
        var trainingsInWeek = (await _scheduleRepository.ScheduleForUser(high ? _high : _low))?.Trainings;
        if (trainingsInWeek != null)
            foreach (var training in trainingsInWeek)
                scheduleForUser.Add(training);
        if (high)
        {
            _scheduleForUser.AddLast(scheduleForUser);
            _high++;
        }
        else
        {
            _scheduleForUser.AddFirst(scheduleForUser);
            _low--;
        }
        StateHasChanged();
    }
}
