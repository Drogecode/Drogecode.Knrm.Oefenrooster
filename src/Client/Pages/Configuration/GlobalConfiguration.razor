@page "/configuration/global"
@using Drogecode.Knrm.Oefenrooster.Shared.Models.User
@attribute [Authorize(Roles = AccessesNames.AUTH_configure_global_all)]
<PageTitle>@L["Global configuration"]</PageTitle>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateDatabase">@L["Upgrade database"]</MudButton>
@switch (_clickedUpdate)
{
    case true:
        <MudText Typo="Typo.body1">Database upgraded!</MudText>
        break;
    case false:
        <MudText Typo="Typo.body1">Something went wrong, while upgrading database :')</MudText>
        break;
}
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddUser">Voeg test user toe</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SyncUsers">Sync users</MudButton>
@switch (_usersSynced)
{
    case true:
        <MudText Typo="Typo.body1">users synced</MudText>
        break;
    case false:
        <MudText Typo="Typo.body1">Something went wrong while syncing users :')</MudText>
        break;
}
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateSpecialDates">Update special dates</MudButton>
@switch (_specialDatesUpdated)
{
    case true:
        <MudText Typo="Typo.body1">special dates bijgewerkt</MudText>
        break;
    case false:
        <MudText Typo="Typo.body1">Something went wrong while updating special dates :')</MudText>
        break;
}
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunDbCorrection">Run db corrections</MudButton>
@switch (_dbCorrection?.Success)
{
    case true:
        <MudText Typo="Typo.body1">Done: @_dbCorrection.Message</MudText>
        break;
    case false:
        <MudText Typo="Typo.body1">Failed: @_dbCorrection.Message</MudText>
        break;
}

<AuthorizeView Roles="@nameof(Licenses.L_SharePointReports)">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunSyncHistorical" Disabled="_clickedSyncHistorical">Run sync historical reports</MudButton>
    @switch (_syncHistorical?.Success)
    {
        case true:
            <MudText Typo="Typo.body1">Done: _syncHistorical</MudText>
            break;
        case false:
            <MudText Typo="Typo.body1">Failed: _syncHistorical</MudText>
            break;
    }
</AuthorizeView>
<AuthorizeView Roles="@nameof(Licenses.L_PreCom)">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeDuplicatePreCom" Disabled="_clickedDeDuplicatePreCom">Delete duplicate pre-com alerts</MudButton>
    @switch (_deDuplicatePreCom?.Success)
    {
        case true:
            <MudText Typo="Typo.body1">Done: _deDuplicatePreCom</MudText>
            break;
        case false:
            <MudText Typo="Typo.body1">Failed: _deDuplicatePreCom</MudText>
            break;
    }
</AuthorizeView>
<AuthorizeView Roles="@AccessesNames.AUTH_super_user">
    <AuthorizeView Roles="@nameof(Licenses.L_SharePointReports)" Context="inner">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@KillDb" Disabled="_clickedSyncHistorical">Kill db</MudButton>
        @switch (_killDb?.Success)
        {
            case true:
                <MudText Typo="Typo.body1">
                    Done: KillDb @_killDb.KillCount
                </MudText>
                break;
            case false:
                <MudText Typo="Typo.body1">
                    Failed: KillDb @_killDb.KillCount
                </MudText>
                break;
        }
    </AuthorizeView>
</AuthorizeView>

@if (_loaded)
{
    <ConfirmSwitch Label="@L["setting training to calendar"]" Color="Color.Primary" Value="@(_settingTrainingToCalendar ?? false)" Disabled="@(_settingTrainingToCalendar is null)"
               ValueChanged="@(async (isChecked) => await PatchTrainingToCalendar(isChecked))"/>
    <ConfirmSwitch Label="@L["delay syncing"]" Color="Color.Primary" Value="@(_delaySyncingTrainingToOutlook ?? false)" Disabled="@(_delaySyncingTrainingToOutlook is null)"
               ValueChanged="@(async (isChecked) => await PatchDelaySyncingTrainingToOutlook(isChecked))"/>
    <MudSwitch Label="@L["Performance monitoring enabled"]" Color="Color.Primary" T="bool" Value="@(_performanceEnabled ?? false)" Disabled="@(_performanceEnabled is null)"
               ValueChanged="@(async (isChecked) => await PatchPerformanceEnabled(isChecked))"/>
    <MudTextField Label="@L["CalenderPrefix"]" T="string" Value="_settingCalenderPrefix" ValueChanged="PatchCalenderPrefix"/>

    <AuthorizeView Roles="@nameof(Licenses.L_PreCom)">
        <MudTextField Label="@L["PreCom Available calendar text"]" T="string" Value="_preComAvailableText" ValueChanged="PatchPreComAvailableText"
                      Counter="@DefaultSettingsHelper.MAX_LENGTH_PRE_COM_AVAILABLE_TEXT" MaxLength="@DefaultSettingsHelper.MAX_LENGTH_PRE_COM_AVAILABLE_TEXT"/>
        <MudNumericField Label="@L["PreCom days in future"]" T="int?" Value="@_preComDaysInFuture" ValueChanged="PatchPreComDaysInFuture"/>
    </AuthorizeView>

    @if (_users != null && _functions != null)
    {
        <AuthorizeView Roles="@AccessesNames.AUTH_super_user">
            <MudPaper>
                <MudList T="string" ReadOnly="true">
                    <MudText>zeven meest recente logins maximaal 7 dagen geleden</MudText>
                    @foreach (var user in _users.Where(x => x.LastLogin >= DateTime.Today.AddDays(-7)).OrderByDescending(x => x.LastLogin).Take(7))
                    {
                        @UserInfo(user)
                    }
                </MudList>
            </MudPaper>
        </AuthorizeView>
        <MudPaper>
            <MudList T="string" ReadOnly="true">
                @foreach (var function in _functions.OrderBy(x => x.Order))
                {
                    @if (_users.Any(x => x.UserFunctionId == function.Id))
                    {
                        <MudText>@function.Name</MudText>
                        @foreach (var user in _users.Where(x => x.UserFunctionId == function.Id).OrderBy(x => x.Name))
                        {
                            @UserInfo(user)
                        }
                    }
                }
                @{
                    var any = false;
                }
                @foreach (var user in _users.Where(x => x.UserFunctionId == null || _functions.All(y => y.Id != x.UserFunctionId)))
                {
                    if (!any)
                    {
                        any = true;
                        <MudText>@L["Users with no function"]</MudText>
                    }

                    @UserInfo(user)
                }
            </MudList>
        </MudPaper>
    }
}
else
{
    <DrogeLoading/>
}

@code{

    private RenderFragment<DrogeUser> UserInfo => user =>
        @<div>
            <MudListItem T="string" OnClick="() => ChangeUser(user)">
                <div class="flex gap-x-4">
                    <p>@user.Name</p>
                    <DateToString ShowDate="true" ShowTime="true" DateTimeUtc="user.LastLogin"/>
                    @if (user.Versions is not null)
                    {
                        @foreach (var version in user.Versions)
                        {
                            <MudChip T="string" Size="Size.Small">@version</MudChip>
                        }
                    }
                </div>
            </MudListItem>
        </div>;

}
