@if (_distinctTypes is not null && _years is not null)
{
    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.DisplaySettings" OnClick="OpenConfigureDialog">@L["Selection"]</MudButton>
    @if (_users is not null && _selectedTypes?.Any() == true)
    {
        <MudTable Hover="true" Breakpoint="Breakpoint.None"
                  Items="@_users.OrderBy(x => _functions?.FirstOrDefault(y => y.Id == x.UserFunctionId)?.Order).ThenBy(x => x.Name)"
                  GroupBy="@_groupBy"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  GroupFooterClass="mb-4"
                  FixedHeader="true"
                  Height=" calc(100vh - 235px)"
                  Dense="true"
                  Bordered="true">
            <HeaderContent>
                <MudTh Class="!z-20">@L["Name"]</MudTh>
                <MudTh Class="!z-20">@L["Compensation"]</MudTh>
                <MudTh Class="!z-20">@L["Total"]</MudTh>
                @foreach (var type in _selectedTypes.Where(x => x?.Type is not null))
                {
                    <MudTh>
                        @type!.Type
                    </MudTh>
                }
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group DrogeCode-sticky-column z-10" colspan="5">
                    @($"{_functions?.FirstOrDefault(y => y.Id == (Guid)(context.Key ?? Guid.Empty))?.Name ?? L["Unknown"]}")
                </MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                @{
                    var userCounters = _analyzeHours?.Where(x => x.UserId == context.Id).ToList();
                    var fullHours = 0;
                    var minutes = 0.0;
                    if (userCounters?.Any() == true)
                    {
                        foreach (var counter in userCounters)
                        {
                            {
                                fullHours += counter.FullHours;
                                minutes += counter.Minutes;
                            }
                        }
                    }
                }
                <MudTd Class="DrogeCode-sticky-column z-10" DataLabel="@L["Name"]">@context.Name</MudTd>
                <MudTd DataLabel="@L["Compensation"]">
                    <div class="d-flex gap-1">
                        €@(fullHours * _compensation)
                    </div>
                </MudTd>
                <MudTd DataLabel="@L["Total"]">
                    <div class="d-flex gap-1">
                        @if (userCounters?.Any() == true && minutes > 0)
                        {
                            var timeSpanMinutes = TimeSpan.FromMinutes(minutes);
                            @fullHours
                            <p>/</p>
                            @timeSpanMinutes.ToString(timeSpanMinutes.Days > 0 ? @"d\:hh\:mm" : @"hh\:mm")
                        }
                    </div>
                </MudTd>
                @foreach (var type in _selectedTypes.Where(x => x?.Type is not null))
                {
                    var userCounter = userCounters?.FirstOrDefault(x => x.Type == type!.Type && x.UserId == context.Id);
                    <MudTd>
                        <div class="d-flex gap-1">
                            @if (userCounter is not null && userCounter.Minutes > 0)
                            {
                                var timeSpanMinutes = TimeSpan.FromMinutes(userCounter.Minutes);
                                @userCounter.FullHours
                                <p>/</p>
                                @timeSpanMinutes.ToString(timeSpanMinutes.Days > 0 ? @"d\:hh\:mm" : @"hh\:mm")
                            }
                        </div>
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudPaper>
            <MudText>@L["You need to make a selection"]</MudText>
        </MudPaper>
    }
}
else
{
    <MudSkeleton/>
    <MudSkeleton/>
    <MudSkeleton/>
    <MudSkeleton/>
}