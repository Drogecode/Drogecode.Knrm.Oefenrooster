@using Drogecode.Knrm.Oefenrooster.Shared.Models.SharePoint;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.ReportTraining
@if (_reportTrainings != null)
{
    <AuthorizeView Roles="@AccessesNames.AUTH_super_user">
        <MudChip T="string">@_reportTrainings.ElapsedMilliseconds</MudChip>
    </AuthorizeView>
    <MudText Typo="Typo.h5">@L["Trainings from SharePoint"]</MudText>

    @if (Users is not null)
    {
        <MudGrid>
            <MudItem xs="12" md="7">
                <SelectMultipleUsers Disabled="_busy" Users="@Users" Functions="@Functions" Selection="@_selectedUsersTraining" SelectionChanged="OnSelectionChanged" MultiSelection="_multiSelection"/>
                <MudSelect T="string" Disabled="_busy" Label="@L["Type"]" SelectedValues="_selectedTrainingTypes" SelectedValuesChanged="SelectedTrainingChanged" Clearable="true"
                           MultiSelection="true">
                    @foreach (var type in _trainingTypes.OrderBy(x => x))
                    {
                        <MudSelectItem T="string" Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    }

    @if (_reportTrainings?.Trainings?.Count() > 0)
    {
        <MudDataGrid Items="@_reportTrainings.Trainings" ReadOnly="true" Filterable="false" SortMode="@SortMode.None">
            <Columns>
                <HierarchyColumn T="DrogeTraining" InitiallyExpandedFunc="IsExpanded"/>
                <TemplateColumn Title="@L["Start"]">
                    <CellTemplate>
                        @if (ReportSettingsHelper.TrainingDifferentStart.Contains(context.Item?.Type ?? string.Empty))
                        {
                            <p>@context.Item?.Commencement.ToNiceString(LDateToString)</p>
                        }
                        else
                        {
                            <p>@context.Item?.Start.ToNiceString(LDateToString)</p>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Title" Title="@L["Description"]"/>
            </Columns>
            <ChildRowContent>
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@context.Item.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudMarkdown Value="@context.Item.Description"/>
                        <MudList T="string" ReadOnly="true">
                            @{ var users = context.Item.Users?.OrderBy(x => x.Order).ToList() ?? new List<SharePointUser>(); }
                            @foreach (var user in users)
                            {
                                <MudListItem>@user.Name - @user.Role</MudListItem>
                            }
                        </MudList>
                        @{
                            var differentStart = ReportSettingsHelper.TrainingDifferentStart.Contains(context.Item?.Type ?? string.Empty);
                            var start = differentStart ? context.Item.Commencement : context.Item.Start;
                        }
                        <MudText Typo="Typo.h6">@L["Times"]</MudText>
                        <MudList T="string" ReadOnly="true">
                            <MudListItem>
                                @($"{L["Start"]} - {start.ToNiceString(LDateToString)}")
                            </MudListItem>
                            @if (!differentStart)
                            {
                                <MudListItem>
                                    @($"{L["Commencement"]} - {context.Item.Commencement.ToNiceString(LDateToString, showDate: context.Item.Start.Date != context.Item.Commencement.Date)}") - @((context.Item.Commencement - start).TotalMinutes) @L["minutes"]
                                </MudListItem>
                            }
                            <MudListItem>
                                @($"{L["End"]} - {context.Item.End.ToNiceString(LDateToString, showDate: context.Item.Commencement.Date != context.Item.End.Date)}") - @((context.Item.End - start).TotalMinutes) @L["minutes"]
                            </MudListItem>
                        </MudList>
                        <MudText Typo="Typo.h6">@L["Miscellaneous"]</MudText>
                        <MudList T="string" ReadOnly="true">
                            <MudListItem>@L["Boat"]: @context.Item.Boat</MudListItem>
                            <MudListItem>@L["Type"]: @context.Item.Type</MudListItem>
                            @if (_isTaco) /*Work in progress*/
                            {
                                <MudListItem>@L["Minutes"]: @context.Item.TotalMinutes</MudListItem>
                                <MudListItem>@L["Hours"]: @context.Item.TotalFullHours</MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </ChildRowContent>
        </MudDataGrid>
        @if (_reportTrainings.TotalCount > _count)
        {
            <div class="d-flex gap-1 place-items-center">
                <MudText>@LApp["Rows per page"]</MudText>
                <div class="max-w-28">
                    <MudSelect T="int" Disabled="_busy" Value="_count" ValueChanged="OnCountChange" Clearable="false" MultiSelection="false">
                        <MudSelectItem T="int" Value="10">10</MudSelectItem>
                        <MudSelectItem T="int" Value="25">25</MudSelectItem>
                        <MudSelectItem T="int" Value="50">50</MudSelectItem>
                    </MudSelect>
                </div>
                <MudPagination Disabled="_busy" ShowFirstButton="true" ShowLastButton="true" MiddleCount="5" Count="@(Convert.ToInt32(Math.Ceiling(_reportTrainings.TotalCount / (double)_count)))"
                               Selected="_currentPage" SelectedChanged="Next" Class="mt-4"/>
            </div>
        }
    }
}
else
{
    <DrogeLoading />
}