@using Drogecode.Knrm.Oefenrooster.Shared.Enums;
<MudPaper MinWidth="@MinWidth" MaxWidth="@MaxWidth" Width="@Width" Elevation="0">
    <MudCard @onclick="() => OnClickCallback.InvokeAsync()">
        <div>
            @{
                var zone = TimeZoneInfo.FindSystemTimeZoneById(_timeZone);
                var dateStart = TimeZoneInfo.ConvertTimeFromUtc(Training.DateStart, zone);
                var dateEnd = TimeZoneInfo.ConvertTimeFromUtc(Training.DateEnd, zone);
                var now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, zone);
            }
            <MudCardHeader Class="@($"trainingType-{Training.RoosterTrainingTypeId} p-2")">
                <CardHeaderContent>
                    @if (ReplaceEmptyName && string.IsNullOrEmpty(Training.Name))
                    {
                        <MudText Typo="Typo.subtitle1">@dateStart.ToString("dddd")</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1" Class="break-words">@Training.Name</MudText>
                    }
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (_iconCount == 1 || _showAllIcons)
                    {
                        @switch (SetBy)
                        {
                            case AvailabilitySetBy.DefaultAvailable:
                                <MudIcon Icon="@Icons.Material.Filled.AutoGraph"/>
                                break;
                            case AvailabilitySetBy.Holiday:
                                <MudIcon Icon="@Icons.Material.Filled.WbSunny"/>
                                break;
                        }

                        @if (OnClickHistory.HasDelegate)
                        {
                            <MudIconButton Class="DrogeCode-card-header-history" Icon="@Icons.Material.Filled.History" Color="Color.Default" OnClick="async () => await OnClickHistory.InvokeAsync()"/>
                        }

                        @if (OnClickSettings.HasDelegate)
                        {
                            <MudIconButton Class="DrogeCode-card-header-settings" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" OnClick="async () => await OnClickSettings.InvokeAsync()"/>
                        }
                    }
                    else if (_iconCount > 1)
                    {
                        <MudIconButton Class="DrogeCode-card-header-more-icons" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" OnClick="() => _showAllIcons = true"/>
                    }
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="@ContentClass">
                @if (ChipContent is not null)
                {
                    @ChipContent
                }
                @if (ShowDayOfWeek)
                {
                    <MudText Typo="Typo.subtitle2">@dateStart.ToString("dddd")</MudText>
                }
                @if (ShowDate)
                {
                    <MudText Typo="Typo.subtitle2">@dateStart.ToNiceString(LDateToString, false, false, true, false)</MudText>
                }
                @if (Training.ShowTime)
                {
                    <MudText Typo="Typo.body2">@dateStart.ToString("HH:mm") @LApp["till"] @dateEnd.ToString("HH:mm")</MudText>
                }
                @if (ChildContent is not null && (ShowPastBody || dateEnd.CompareTo(now) >= 0))
                {
                    @ChildContent
                }
                else if (ChildContent is not null && !ChildContent.Equals("") && !ShowPastBody)
                {
                    <MudButton OnClick="() => ShowPastBody = true">@MoreMessage</MudButton>
                }
            </MudCardContent>
        </div>
    </MudCard>
</MudPaper>