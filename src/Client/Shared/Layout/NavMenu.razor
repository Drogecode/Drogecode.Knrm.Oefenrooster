@using Drogecode.Knrm.Oefenrooster.Shared.Models.Menu
<MudNavMenu>
    @if (_linkedCustomers is not null)
    {
        <div class="m-2">
            <MudSelect T="Guid?" Value="@_currentCustomer" ValueChanged="OnCustomerChange" ToStringFunc="CustomerIdToName" Disabled="@(_changingCustomer)">
                @foreach (var customer in _linkedCustomers.OrderBy(x => x.Name))
                {
                    <MudSelectItem T="Guid?" Value="@customer.CustomerId" Disabled="@(_currentCustomer == customer.CustomerId)">@customer.Name</MudSelectItem>
                }
            </MudSelect>
        </div>
    }
    <MudNavLink Icon="@Icons.Material.Filled.Dashboard" Href="/" Match="NavLinkMatch.All">@L["Dashboard"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.CalendarMonth" Href="@_uriCalendar" Match="NavLinkMatch.Prefix">@LApp["Availability"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.EditCalendar" Href="@_uriSchedule" Match="NavLinkMatch.Prefix" data-testid="nav-schedule">@L["Schedule"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.AutoGraph" Href="/user/defaults" Match="NavLinkMatch.Prefix">@L["Defaults"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.WbSunny" Href="/user/vacations" Match="NavLinkMatch.Prefix">@L["Vacations"]</MudNavLink>
    <AuthorizeView Roles="@nameof(Licenses.L_PreCom)">
        <MudNavLink Icon="@Icons.Material.Filled.SecurityUpdateWarning" Href="/precom/alerts" Match="NavLinkMatch.Prefix">@L["PreCom alerts"]</MudNavLink>
    </AuthorizeView>
    <AuthorizeView Roles="@AccessesNames.AUTH_users_details">
        <MudNavLink Icon="@Icons.Material.Filled.ManageAccounts" Href="@_uriPlannerUser" Match="NavLinkMatch.Prefix">@L["User details"]</MudNavLink>
    </AuthorizeView>
    <AuthorizeView
        Roles="@(AccessesNames.AUTH_configure_training_types + ", " + AccessesNames.AUTH_super_user + ", " + AccessesNames.AUTH_scheduler_monthitem + ", " + AccessesNames.AUTH_configure_default_schedule + ", " +
               AccessesNames.AUTH_scheduler_dayitem + ", " + AccessesNames.AUTH_configure_vehicles + ", " + AccessesNames.AUTH_configure_user_functions + ", " + AccessesNames.AUTH_configure_user_roles + ", " +
               AccessesNames.AUTH_configure_global_all + ", " + AccessesNames.AUTH_configure_training_target)">
        <MudNavGroup Title="@L["Configuration"]" Expanded="@_configurationExpanded" ExpandedChanged="ConfigurationExpandedChanged">
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_training_types" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.DirectionsRun" Href="/configuration/training-types" Match="NavLinkMatch.Prefix">@L["Training types"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_training_target" Context="inner">
                <MudNavLink Icon="@DrogeIcons.Target" Href="/configuration/training-targets" Match="NavLinkMatch.Prefix">@L["Training targets"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_default_schedule" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.AutoGraph" Href="/configuration/default-schedule" Match="NavLinkMatch.Prefix">@L["Default schedule"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_vehicles" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.DirectionsBoat" Href="/configuration/vehicles" Match="NavLinkMatch.Prefix">@L["Vehicles"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_user_functions" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.Groups2" Href="/configuration/user-functions" Match="NavLinkMatch.Prefix">@L["User functions"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_user_roles" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.SupervisedUserCircle" Href="/configuration/user-roles" Match="NavLinkMatch.Prefix">@L["User roles"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_monthitem" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.AdUnits" Href="/configuration/month-item" Match="NavLinkMatch.Prefix">@L["Month banner"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_dayitem" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.Curtains" Href="/configuration/day-item" Match="NavLinkMatch.Prefix">@L["Special days"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_configure_global_all" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.Settings" Href="/configuration/global" Match="NavLinkMatch.Prefix">@L["Configuration"]</MudNavLink>
            </AuthorizeView>
            <AuthorizeView Roles="@AccessesNames.AUTH_super_user" Context="inner">
                <MudNavLink Icon="@Icons.Material.Filled.AccountTree" Href="/configuration/customers" Match="NavLinkMatch.Prefix">@L["Customers"]</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Filled.History" Href="/configuration/audit" Match="NavLinkMatch.Prefix">@L["Audit"]</MudNavLink>
            </AuthorizeView>
        </MudNavGroup>
    </AuthorizeView>
    @if (_menuItems is not null)
    {
        var menuItems = _menuItems.ToList();
        @CustomerMenu((menuItems, 0))
    }
    <MudDivider/>
    @if (Navigation.ToBaseRelativePath(Navigation.Uri).StartsWith(_uriCalendar.Substring(1)) ||
         (Navigation.ToBaseRelativePath(Navigation.Uri).StartsWith(_uriSchedule.Substring(1)) && !Navigation.Uri.EndsWith("Table")))
    {
        <MudList T="string">
            <AuthorizeView Roles="@AccessesNames.AUTH_scheduler_add">
                <MudListItem T="string" OnClick="AddTraining" Class="cursor-pointer" data-testid="nav-add-training">
                    <AvatarContent>
                        <MudAvatar>
                            <MudIcon Icon="@Icons.Material.Filled.Add" data-testid="nav-add-training-icon" Disabled="_addingTraining"/>
                        </MudAvatar>
                    </AvatarContent>
                    <ChildContent>
                        @L["Training"]
                    </ChildContent>
                </MudListItem>
            </AuthorizeView>
        </MudList>
    }
</MudNavMenu>

@code{
    private RenderFragment<(List<DrogeMenu> menuItems, int depth)> CustomerMenu => value =>
        @<div id="@($"menu-depth-{value.depth}")">
            @{
                DrogeMenu prev = null;
            }
            @while (true)
            {
                var menu = value.menuItems.FirstOrDefault();
                if (menu is null || !menu.IsGroup && prev is not null && !menu.ParentId.Equals(prev.ParentId)) break;
                value.menuItems.Remove(menu);
                try
                {
                    if (menu.IsGroup)
                    {
                        <MudNavGroup Title="@menu.Text" Expanded="@_useFullLinkExpanded" ExpandedChanged="UseFullLinksExpandedChanged">
                            @{
                                var subMenu = value.menuItems.ToList();
                            }
                            @CustomerMenu((subMenu, value.depth + 1))
                        </MudNavGroup>
                    }
                    else
                    {
                        <MudNavLink OnClick="@(async x => await ClickExtraMenu(menu))">@menu.Text</MudNavLink>
                    }

                    prev = menu;
                }
                catch (Exception ex)
                {
                    DebugHelper.WriteLine(ex);
                }
            }
        </div>;

}