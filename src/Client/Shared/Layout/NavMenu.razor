@using Drogecode.Knrm.Oefenrooster.Client.Pages.Planner.Components;
@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
<MudNavMenu>
    <MudNavLink Icon="@Icons.Material.Filled.Dashboard" Href="/" Match="NavLinkMatch.All">@L["Dashboard"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.CalendarMonth" Href="@_uriCalendar" Match="NavLinkMatch.Prefix">@L["Calendar"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.EditCalendar" Href="@_uriSchedule" Match="NavLinkMatch.Prefix">@L["Schedule"]</MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.Settings" Href="/configuration/global" Match="NavLinkMatch.Prefix">@L["Configuration"]</MudNavLink>
    <MudDivider />
    <MudNavLink Href="https://dorus1824.sharepoint.com/" Match="NavLinkMatch.All">@L["Sharepoint"]</MudNavLink>
    <MudDivider />
    @if (Navigation.ToBaseRelativePath(Navigation.Uri).StartsWith(_uriCalendar.Substring(1)))
    {
        <MudList>
            <MudListItem OnClick="AddTraining" Avatar="@Icons.Material.Filled.Add" Class="cursor-pointer">
                @L["Training"]
            </MudListItem>
        </MudList>
    }
</MudNavMenu>

@code {
    [Inject] private IStringLocalizer<NavMenu> L { get; set; } = default!;
    [Inject] NavigationManager Navigation { get; set; } = default!;
    [Inject] private IDialogService _dialogProvider { get; set; } = default!;
    [Inject] private VehicleRepository _vehicleRepository { get; set; } = default!;
    [CascadingParameter] DrogeCodeGlobal Global { get; set; } = default!;

    private string _uriCalendar = "/planner/calendar";
    private string _uriSchedule = "/planner/schedule";

    protected override void OnInitialized() { 
        Navigation.LocationChanged += RefreshForSubMenu; 
    }

    private void RefreshForSubMenu(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }
    private async Task AddTraining()
    {
        var vehicles = await _vehicleRepository.GetAllVehiclesAsync();
        var parameters = new DialogParameters {
            { "Planner", null },
            { "Refresh", null },
            { "Vehicles", vehicles },
            { "Global", Global }
        };
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                DisableBackdropClick = true
            };
        _dialogProvider.Show<EditTrainingDialog>(L["Add training"], parameters, options);
    }
}