@inherits LayoutComponentBase
@inject IStringLocalizer<MainLayout> L
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                @L["Title"]
                <MudSpacer />
                <MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="_newNotificationsAvailable">
                    <MudMenu Icon="@Icons.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
                        <div class="d-flex justify-space-between align-center px-2">
                            <MudText Typo="Typo.subtitle2">Notifications</MudText>
                            <MudButton Disabled="@(_newNotificationsAvailable == false)" StartIcon="@Icons.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="ml-16 mr-n2">Mark as read</MudButton>
                        </div>
                        @if (_messages != null && _newNotificationsAvailable)
                        {
                            @foreach (var (message, isRead) in _messages.Take(5))
                            {
                                <MudMenuItem Class="px-2 py-0 rounded" Link="@($"/mud/announcements/{message.Id}")">
                                    <MudText Typo="Typo.subtitle2">@message.Title</MudText>
                                    <MudText Typo="Typo.body2">@($"{message.Authors.FirstOrDefault()?.DisplayName} • {message.PublishDate.ToString("MM/dd/yyyy")}")</MudText>
                                    </MudMenuItem>
                                <MudDivider Class="my-2" />
                            }
                        }
                        else
                        {
                            <div class="d-flex justify-center align-center px-2 py-8 relative">
                                <MudText Class="mud-text-secondary my-12">Nothing new :(</MudText>
                            </div>
                        }
                    </MudMenu>
                </MudBadge>
                <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" AnchorOrigin="@Origin.BottomLeft" TransformOrigin="@Origin.TopLeft">
                    <MudMenuItem Href="/user/profile">Profile</MudMenuItem>
                    <MudMenuItem @onclick="BeginLogout">Logout</MudMenuItem>
                </MudMenu>
                <MudIconButton Icon="@(_isDarkMode ? Icons.Filled.DarkMode : Icons.Filled.LightMode)" Color="Color.Inherit" OnClick="@(()=>_isDarkMode = !_isDarkMode)" />
            </MudAppBar>
            <CascadingValue Value="_global">
                <MudDrawer @bind-Open="@_drawerOpen">
                    <NavMenu />
                </MudDrawer>
                <MudMainContent>
                    <Banner />
                    @Body
                    <UpdateChecker />
                </MudMainContent>
            </CascadingValue>
        </Authorized>
        <Authorizing>
            <MudMainContent>
                <MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
                    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@L["One moment"]</MudText>
                </MudContainer>
            </MudMainContent>
        </Authorizing>
        <NotAuthorized>
            @NotAuthorized()
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    private bool _isDarkMode;
    private bool _drawerOpen = true;
    private bool _settingsOpen = true;
    private bool _newNotificationsAvailable = false;
    private IDictionary<NotificationMessage, bool> _messages = null;
    private bool _isAuthenticated;
    private string _name = string.Empty;

    protected async Task NotAuthorized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;
        if (!_isAuthenticated)
            Navigation.NavigateTo("landing_page");
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void ToggleOpen()
    {
        _settingsOpen = !_settingsOpen;
    }
}
