@implements IDisposable
@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Client.Services
@using Drogecode.Knrm.Oefenrooster.Client.Services.Interfaces;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Configuration;

@code {
    [Inject] private IStringLocalizer<UpdateChecker> L { get; set; } = default!;
    [Inject] private ConfigurationRepository ConfigurationRepository { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private CustomStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] IOfflineService OfflineService { get; set; } = default!;
    [Inject] ISnackbar Snackbar { get; set; } = default!;
    private VersionDetailResponse? _updateDetails;
    private readonly CancellationTokenSource _cls = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            while (!_cls.IsCancellationRequested)
            {
                try
                {
                    var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    _updateDetails = await ConfigurationRepository.NewVersionAvailable();
                    if (_updateDetails is not null && (_updateDetails.UpdateVersion != DefaultSettingsHelper.UPDATE_VERSION || _updateDetails.ButtonVersion != DefaultSettingsHelper.BUTTON_VERSION) && DefaultSettingsHelper.UPDATE_VERSION <= _updateDetails.ButtonVersion)
                    {
                        var config = (SnackbarOptions options) =>
                        {
                            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
                            options.RequireInteraction = true;
                            options.Action = L["Click to reload"];
                            options.ActionColor = Color.Inherit;
                            options.OnClick = snackbar =>
                            {
                                Navigation.NavigateTo(Navigation.Uri, true);
                                return Task.CompletedTask;
                            };
                        };
                        Snackbar.Add(L["Update available"], Severity.Warning, configure: config, key: "outdated");
                    }

                    if (user.User.Identity?.IsAuthenticated is not true)
                        await AuthenticationStateProvider.Logout();
                }
                catch (Exception ex)
                {
                    DebugHelper.WriteLine(ex);
                }
                finally
                {
                    for (int i = 0; i < 30; i++)
                    {
                        if (_cls.IsCancellationRequested)
                            break;
                        await Task.Delay(1000);
                    }
                }
            }
        }
    }

    public void Dispose()
    {
        _cls.Cancel();
    }

}