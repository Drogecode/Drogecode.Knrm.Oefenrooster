@using Drogecode.Knrm.Oefenrooster.Client.Repositories;
@using Drogecode.Knrm.Oefenrooster.Client.Services
@using Drogecode.Knrm.Oefenrooster.Client.Services.Interfaces;
@using Drogecode.Knrm.Oefenrooster.Shared.Models.Configuration;
@code {
    [Inject] private IStringLocalizer<UpdateChecker> L { get; set; } = default!;
    [Inject] private ConfigurationRepository ConfigurationRepository { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private CustomStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] IOfflineService OfflineService { get; set; } = default!;
    [Inject] ISnackbar Snackbar { get; set; } = default!;
    private VersionDetailResponse? _updateDetails;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        while (true)
        {
            try
            {
                var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _updateDetails = await ConfigurationRepository.NewVersionAvailable();
                if (_updateDetails is not null && _updateDetails.UpdateVersion != DefaultSettingsHelper.UPDATE_VERSION && DefaultSettingsHelper.UPDATE_VERSION <= _updateDetails.ButtonVersion)
                {
                    var config = (SnackbarOptions options) =>
                    {
                        options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
                        options.RequireInteraction = true;
                        options.Action = L["Click to reload"];
                        options.ActionColor = Color.Inherit;
                        options.Onclick = snackbar =>
                        {
                            Navigation.NavigateTo(Navigation.Uri, true);
                            return Task.CompletedTask;
                        };
                    };
                    Snackbar.Add(L["Update available"], Severity.Warning, configure: config, key: "outdated");
                }
                if (!OfflineService.Offline && user.User.Identity?.IsAuthenticated is not true)
                    await AuthenticationStateProvider.Logout();
                OfflineService.Offline = false;
            }
            catch (Exception ex)
            {
                DebugHelper.WriteLine(ex);
                OfflineService.Offline = true;
            }
            finally
            {
                await Task.Delay(1000 * 120);
            }
        }
    }
}
